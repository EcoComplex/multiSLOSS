{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Ant",
				"Ant_Meta"
			],
			[
				"Wedd",
				"Weddell"
			],
			[
				"out",
				"outFile"
			],
			[
				"tot",
				"totBio"
			],
			[
				"doub",
				"double"
			],
			[
				"len",
				"length"
			],
			[
				"mean",
				"mean_sims"
			],
			[
				"Re",
				"ReplacementRate"
			],
			[
				"DE",
				"DeltaDq"
			],
			[
				"Peri",
				"PERIwd"
			],
			[
				"ol",
				"oldcd"
			],
			[
				"BCI",
				"BCIwd"
			],
			[
				"d1_",
				"d1_delta"
			],
			[
				"bib",
				"bib"
			]
		]
	},
	"buffers":
	[
		{
			"file": "SLOSS.Rmd",
			"settings":
			{
				"buffer_size": 19027,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ms_SLOSS.Rmd",
			"settings":
			{
				"buffer_size": 34287,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					699,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAXl0AAAAAAABeXQAAAAAAAAAAAAAAAPC/"
				],
				[
					700,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABBhgAALS0tCnRpdGxlOiAiV2h5IHRoZXJlIGFyZSBtb3JlIHNwZWNpZXMgaW4gc2V2ZXJhbCBzbWFsbCBwYXRjaGVzIHZzIGZldyBsYXJnZSBwYXRjaGVzOgogIGEgbXVsdGktc3BlY2llcyBtb2RlbGluZyBhcHByb2FjaCIKYmlibGlvZ3JhcGh5OiBzbG9zc19iaWIuYmliCmNzbDogImZ1bmN0aW9uYWwtZWNvbG9neS5jc2wiCm91dHB1dDoKICB3b3JkX2RvY3VtZW50OiBkZWZhdWx0CiAgcGRmX2RvY3VtZW50OgogICAgaW5jbHVkZXM6CiAgICAgIGluX2hlYWRlcjogbWFyZ2lucy5zdHkKLS0tCgoKIyMgQWJzdHJhY3QKIAoxLiBBcyBnbG9iYWwgYmlvZGl2ZXJzaXR5IGlzIHJhcGlkbHkgZGVjbGluaW5nIGR1ZSB0byBoYWJpdGF0IGxvc3MsIGl0IGlzIGltcG9ydGFudCB0byBkZXRlcm1pbmUgaG93IHRvIHByb3RlY3QgaXQuIFRoZSBwb2xpY2llcyBvZiBtYW55IGNvbnNlcnZhdGlvbiBhZ2VuY2llcyBhcmUgc3RpbGwgcHJpb3JpdGl6aW5nIHRoZSBwcmVzZXJ2YXRpb24gb2YgYSBzaW5nbGUgbGFyZ2UgaGFiaXRhdCBhcmVhIChTTCkgdnMuIHNldmVyYWwgc21hbGwgYXJlYXMgb2YgdGhlIHNhbWUgc2l6ZSAoU1MpLCBkZXNwaXRlIGVtcGlyaWNhbCBzdXBwb3J0IGZhdm91cmluZyBTUy4gSG93ZXZlciwgdG8gZGF0ZSwgbW9zdCB0aGVvcmllcyByZWdhcmRpbmcgdGhpcyBpc3N1ZSB3ZXJlIGJhc2VkIG9uIHNpbmdsZS1zcGVjaWVzIG1vZGVscy4gCgoyLiBUaGlzIHdvcmsgYWltcyB0byBleHBsb3JlIHNwYXRpYWwgbXVsdGktc3BlY2llcyBtb2RlbHMgdG8gdmVyaWZ5IHRoZSBTUyA+IFNMIHBhdHRlcm4gYW5kIGRldGVybWluZSBpdHMgY2F1c2VzLiBXZSB1c2VkIHRocmVlIHR5cGVzIG9mIG1vZGVsczogYSBjbGFzc2ljYWwgbmV1dHJhbCwgbmV1dHJhbCB3aXRoIGhhYml0YXQgc2VsZWN0aW9uLCBhbmQgYSBjb21wZXRpdGl2ZSBoaWVyYXJjaGljYWwgbW9kZWwuICBBbGwgbW9kZWxzIGhhdmUgdGhyZWUgcGFyYW1ldGVycywgbmFtZWx5IGV4dGluY3Rpb24sIHJlcHJvZHVjdGlvbiwgYW5kIGRpc3BlcnNhbCBkaXN0YW5jZS4gSW4gdGhlIGNsYXNzaWNhbCBuZXV0cmFsIG1vZGVsLCBzcGVjaWVzIGFyZSBlcXVpdmFsZW50IGFuZCBoYXZlIHRoZSBzYW1lIHBhcmFtZXRlcnM7IHdoZW4gdGhlcmUgaXMgYSByZXByb2R1Y3Rpb24gZXZlbnQgdGhleSBzZW5kIHRoZSBwcm9wYWd1bGUgdG8gYSBzdXJyb3VuZGluZyBwYXRjaCBibGluZGx5LCBhbmQgaWYgdGhlIHBhdGNoIGlzIGFscmVhZHkgb2NjdXBpZWQgdGhlIHByb3BhZ3VsZSBkaWVzLiBJbiB0aGUgbmV1dHJhbC13aXRoLWhhYml0YXQgc2VsZWN0aW9uIG1vZGVsLCB0aGUgcHJvcGFndWxlcyBzZWxlY3QgYW4gZW1wdHkgcGF0Y2ggc28gdGhlaXIgc3Vydml2YWwgaXMgZW5zdXJlZC4gSW4gdGhlIGhpZXJhcmNoaWNhbCBtb2RlbCwgc3BlY2llcyBoYXZlIGNvbXBldGl0aXZlIGRvbWluYW5jZSBhbmQgbW9yZSBkb21pbmFudCBvbmVzIGNhbiByZXBsYWNlIHRoZSBsZXNzIGRvbWluYW50IHdpdGggYSByZXBsYWNlbWVudCByYXRlIHBhcmFtZXRlci4gV2UgdXNlIDEwMCBzcGVjaWVzIGFuZCBzdGFydCBzaW11bGF0aW5nIHRoZSBjb2xvbml6YXRpb24gb2YgYW4gZW1wdHkgYXJlYSB0aGVuIHdlIGRlc3Ryb3kgYSBmaXhlZCBhbW91bnQgb2YgaGFiaXRhdCB1c2luZyBkaWZmZXJlbnQgcmVndWxhciBwYXRjaCBzaXplcy4gCgozLiBUaGUgcmVzdWx0cyBmb3IgYWxsIG1vZGVscyBhcmUgYWxtb3N0IGFsd2F5cyB0aGF0IFNTIHJldGFpbnMgbW9yZSBzcGVjaWVzIHRoYW4gU0wuIFRoZSBleHRpbmN0aW9uIG9mIHNwZWNpZXMgaW4gcGF0Y2hlcyBkZXBlbmRzIG9uIHRoZSBxdW90aWVudCBiZXR3ZWVuIHJlcHJvZHVjdGlvbiBhbmQgZXh0aW5jdGlvbiByYXRlcyBpbiByZWxhdGlvbiB0byBwYXRjaCBzaXplLiBUaGUgb25seSBjYXNlIHdoZW4gU0wgPiBTUyBpcyB3aGVuIGRpc3BlcnNhbCBpcyBpbnN1ZmZpY2llbnQgdG8gY29ubmVjdCBwYXRjaGVzLCBhbmQgcGF0Y2ggc2l6ZSBpcyBzbWFsbGVyIHRoYW4gdGhlIG1pbmltdW0gdG8gcHJldmVudCBleHRpbmN0aW9uLiBJZiBwYXRjaCBzaXplIGlzIGFib3ZlIHRoZSBjcml0aWNhbCBzaXplIHRvIG1haW50YWluIGxvY2FsIHBvcHVsYXRpb25zIHRoZSBTUyA+IFNMIHBhdHRlcm4gaXMgZHVlIHRvIHRoZSBzYW1wbGluZyBlZmZlY3Qgb2YgYWdncmVnYXRlZCBzcGVjaWVzIGRpc3RyaWJ1dGlvbiBjb21iaW5lZCB3aXRoIHRoZSByZWR1Y3Rpb24gb2YgZGlzcGVyc2FsIGFiaWxpdHkgb2Ygc3BlY2llcy4gCgo0LiBIaWdoIGRpc3BlcnNhbCByYXRlcyBwcm9kdWNlIGhvbW9nZW5pemF0aW9uIG9mIHNwZWNpZXMgZGlzdHJpYnV0aW9uIGFuZCBhIHJlZHVjdGlvbiBvZiBzcGVjaWVzIHJpY2huZXNzIGFuZCB0aGlzIGlzIHdoeSBoYWJpdGF0IGZyYWdtZW50YXRpb24gYnkgaGFiaXRhdCBsb3NzIHJldGFpbnMgbW9yZSBzcGVjaWVzIHdoZW4gcGF0Y2hlcyBhcmUgc21hbGxlci4gVGhlIG1vZGVsIHByZWRpY3RzIHRoYXQgaWYgYSBzZXQgb2Ygc3BlY2llcyBoYXZlIG1vcmUgZGlzcGVyc2FsIGNhcGFiaWxpdGllcyB0aGUgU1MgZWZmZWN0IHdvdWxkIGJlIGxvd2VyIHRoYW4gZm9yIHNwZWNpZXMgd2l0aCBsZXNzIGRpc3BlcnNhbC4gCiAKIyMgS2V5d29yZHMKCkhhYml0YXQgZnJhZ21lbnRhdGlvbiwgYmlvZGl2ZXJzaXR5LCBzcGF0aWFsbHkgZXhwbGljaXQgbW9kZWxzLCBtdWx0aS1zcGVjaWVzIG1vZGVscywgbmV1dHJhbCB0aGVvcnksIGNvbXBldGl0aXZlIHRoZW9yeSwgaGFiaXRhdCBzZWxlY3Rpb24sIGRpc3BlcnNhbCwgZXh0aW5jdGlvbiwgcmVwcm9kdWN0aW9uLgoKIyMgSW50cm9kdWN0aW9uIAoKR2xvYmFsIGJpb2RpdmVyc2l0eSBpcyByYXBpZGx5IGRlY2xpbmluZyBkdWUgdG8sIGFtb25nIG90aGVyIGZhY3RvcnMsIGhhYml0YXQgbG9zcyBbQFlvdW5nMjAxNjtAQ2hhc2UyMDIwO0BOZXdib2xkMjAxNV0uIEFzIGhhYml0YXQgZnJhZ21lbnRhdGlvbiBvY2N1cnMgYXQgdGhlIHNhbWUgdGltZSBhcyBoYWJpdGF0IGxvc3MsIHRoZSBlZmZlY3RzIG9mIGJvdGggcHJvY2Vzc2VzIGFyZSBkaWZmaWN1bHQgdG8gZGlzZW50YW5nbGUgW0BIYWRkYWQyMDE1XS4gTGFuZHNjYXBlIGNvbm5lY3Rpdml0eSBhbmQgb3JnYW5pc20gbW9iaWxpdHkgYXJlIGNyaXRpY2FsIGZlYXR1cmVzIGZvciBwb3B1bGF0aW9uIHBlcnNpc3RlbmNlIFtAVGF5bG9yMTk5M10uIFN0YXJ0aW5nIGZyb20gYSBsYW5kbWFyayBwYXBlciBbQERpYW1vbmQxOTc1XSwgY29uc2VydmF0aW9uIGJpb2xvZ2lzdHMgZW5nYWdlZCBpbiB0aGUgY2hhbGxlbmdpbmcgdGFzayBvZiByZWNvbW1lbmRpbmcgcHJvdGVjdGlvbiBtZWFzdXJlcyBnaXZlbiB0aGUgZW52aXJvbm1lbnRhbCBjcmlzaXMgY291cGxlZCB3aXRoIGEgbGFjayBvZiBrbm93bGVkZ2Ugb2YgbW9zdCBvZiB0aGUgd29ybGTigJlzIGJpb2RpdmVyc2l0eSBhbmQgbGltaXRlZCBmdW5kaW5nIGZvciBjb25zZXJ2YXRpb24uIEluIHRoYXQgY29udGV4dCwgZWFybHkgcmVjb21tZW5kYXRpb25zIGNsYWltaW5nIHRvIGZvbGxvdyBlY29sb2dpY2FsIHRoZW9yeSBkZXJpdmVkIHNpbXBsZSB0aHVtYiBydWxlcyB0byBiZXR0ZXIgZGVzaWduIHByb3RlY3RlZCBhcmVhcy4gSG93ZXZlciwgYXMgbm90ZWQgcmFwaWRseSwgc3BlY2llcy9hcmVhIHJlbGF0aW9uc2hpcHMgZG8gbm90IGhhdmUgYSBjbGVhciBhc3NvY2lhdGlvbiB3aXRoIGZyYWdtZW50YXRpb24gcGVyIHNlIGJ1dCBtYWlubHkgd2l0aCBvdmVyYWxsIGhhYml0YXQgbG9zcyBbQFNpbWJlcmxvZmYxOTgyXS4KQWltaW5nIHRvIGRlc2lnbiBiZXR0ZXIgbWFuYWdlbWVudCBwcmFjdGljZXMsIHRoaXMgbGVkIHRvIGEgbmVhcmx5IDUwLXllYXIgU2luZ2xlIExhcmdlIHZzIFNldmVyYWwgU21hbGwgKFNMT1NTKSBkZWJhdGUuIFdoaWxlIHNvbWUgYXV0aG9ycyBhcmd1ZSB0aGF0IGhhYml0YXQgbG9zcyBpcyB0aGUgbW9zdCBvdmVyd2hlbG1pbmcgZWZmZWN0IG9uIHNwZWNpZXMgbG9zcywgZm9yIG90aGVycyB0aGUgY29tcGxleCBmYWN0b3JzIGFyaXNpbmcgZnJvbSBmcmFnbWVudGF0aW9uIGZ1cnRoZXIgZW5oYW5jZSBzcGVjaWVzIGV4dGluY3Rpb25zIFtARmFocmlnMjAxNztARmxldGNoZXIyMDE4XS4gIAoKVGhlIFNMT1NTIGRlYmF0ZSBoYXMgYmVlbiBhbiBpbXBvcnRhbnQgYWNhZGVtaWMgYW5kIGludGVsbGVjdHVhbCBkaXNjdXNzaW9uIGluIGNvbnNlcnZhdGlvbiBiaW9sb2d5LiBIb3dldmVyLCBpbiBwcmFjdGljYWwgaW1wbGVtZW50YXRpb24sIG51bWVyb3VzIGNvbnNlcnZhdGlvbiBhZ2VuY2llcyBwZXJzaXN0IGluIHByaW9yaXRpemluZyB0aGUgc2FmZWd1YXJkaW5nIG9mIGV4dGVuc2l2ZSwgY29udGlndW91cyBoYWJpdGF0IGFyZWFzLCBvZnRlbiBuZWdsZWN0aW5nIHRoZSBwcm90ZWN0aW9uIG9mIHNtYWxsZXIgcGF0Y2hlcyBvZiBuYXR1cmFsIGhhYml0YXQgW0BBcm1zd29ydGgyMDE4XS4gQXMgYW4gZXhhbXBsZSwgdGhlIGN1cnJlbnQgZW1waGFzaXMgb24gJ3Jld2lsZGluZycgaW4gRXVyb3BlIGlzIGdlYXJlZCB0b3dhcmRzIHRoZSBjb25zZXJ2YXRpb24gYW5kIHJlc3RvcmF0aW9uIG9mIGNvbnRpZ3VvdXMgbmF0dXJhbCBoYWJpdGF0cywgd2l0aCBhIHNwZWNpZmllZCAnY29yZSBhcmVhJyBvZiBhdCBsZWFzdCAxMCwwMDAgaGVjdGFyZXMgW0BFdXJvcGFyY0ZlZGVyYXRpb24yMDEzXS4gU2ltaWxhcmx5LCBjb25zZXJ2YXRpb24gZWZmb3J0cyBmb3IgbGFyZ2Ugd2F0ZXIgYm9kaWVzIHRha2UgcHJlY2VkZW5jZSwgbGVhdmluZyBzbWFsbCBwb25kcyBvciBwb25kc2NhcGVzIGxhcmdlbHkgZXhjbHVkZWQgZnJvbSBwcmlvcml0eSBjb25zaWRlcmF0aW9ucyBbQEhpbGwyMDE4XS4KCldoaWxlIHRoZSBvdmVyYWxsIGhhYml0YXQgbG9zcyBpcyB3aWRlbHkgYWNjZXB0ZWQgYXMgYSBwcm9jZXNzIGxlYWRpbmcgdG8gbG9uZy10ZXJtIGJpb2RpdmVyc2l0eSBsb3NzIFtAS2VpbDIwMTU7QEhvZGdzb24yMDExXSwgdGhlIHByb3Bvc2l0aW9uIHRoYXQgc2luZ2xlIGxhcmdlIHJlc2VydmVzIHJldGFpbiBtb3JlIHNwZWNpZXMgdGhhbiBzZXZlcmFsIHNtYWxsIHJlc2VydmVzIG9mIHRoZSBzYW1lIGFyZWEgKFNMID4gU1MpIHJlbWFpbiBhdCBhIHNpbWlsYXIgaGllcmFyY2hpY2FsIHN0YXRlLCBldmVuIGFmdGVyIHNldmVyYWwgY3JpdGljaXNtcyAocmV2aWV3ZWQgaW4gIEBGYWhyaWcyMDE3KS4gRW1waXJpY2FsIG9ic2VydmF0aW9uYWwgYW5kIGV4cGVyaW1lbnRhbCBkYXRhIHNob3dzIHRoZSBwcmVkb21pbmFuY2Ugb2YgdGhlIG9wcG9zaXRlIHBhdHRlcm4gKFNTID4gU0wpIGV2ZXIgc2luY2UgdGhlIDgwcyBhbmQgdGhpcyBmYWN0IGhhcyBiZWVuIHJlaW5mb3JjZWQgdG8gdGhpcyBkYXkgW0BTaW1iZXJsb2ZmMTk4MjsgQEZhaHJpZzIwMjA7IEBIYW1taWxsMjAyMF0uIFRoZSBhY3R1YWwgcHJvY2Vzc2VzIGRyaXZpbmcgaXQgcmVtYWluIGVsdXNpdmUgYW5kIGl0IGlzIHByb2JhYmx5IG11bHRpLWNhdXNhbC4gSW4gdGhhdCBzY2VuYXJpbywgbW9kZWwgc2ltdWxhdGlvbnMgY291bGQgcHJvZHVjZSB1c2VmdWwgaHlwb3RoZXNlcyB0byBiZXR0ZXIgdW5kZXJzdGFuZCB0aGUgcHJvY2Vzc2VzIGxlYWRpbmcgdG8gbm9uLWludHVpdGl2ZSBwYXR0ZXJucyBvZiBiaW9kaXZlcnNpdHkgbG9zcy4gCgpUaGUgU0xPU1MgZGViYXRlIGhhcyBiZWVuIGFwcHJvYWNoZWQgZnJvbSBzZXZlcmFsIHRoZW9yZXRpY2FsIGZyYW1ld29ya3MsIGJ1dCBtb3N0IG9mIHRoZW0gd2VyZSBiYXNlZCBvbiBzaW5nbGUtc3BlY2llcyBtb2RlbHMgW0BGYWhyaWcyMDIxXS4gRGVzcGl0ZSB0aGUgbG9uZy1zdGFuZGluZyBkaXNjdXNzaW9uLCB0aGVyZSByZW1haW5zIGEgbm90YWJsZSBzY2FyY2l0eSBvZiBtdWx0aS1zcGVjaWVzIG1vZGVscyBleHBsaWNpdGx5IGRlc2lnbmVkIHRvIHZhbGlkYXRlIGZyYWdtZW50YXRpb24gdGhlb3JpZXMuIEhvd2V2ZXIsIHJlY2VudCBzdHVkaWVzIHVzaW5nIHNwYXRpYWxseSBleHBsaWNpdCBzaW11bGF0aW9ucyByZXZlYWxlZCB0aGF0IHdoaWxlIGhpZ2ggZnJhZ21lbnRhdGlvbiBsZWFkcyB0byBtb3JlIGxvY2FsIGV4dGluY3Rpb25zIGR1ZSB0byB0aGUgcmVkdWNlZCBoYWJpdGF0IHNpemUsIGF0IGxvdyBsZXZlbHMgb2YgZnJhZ21lbnRhdGlvbiwgY29tcGV0aXRpdmUgZXhjbHVzaW9uIGlzIG1vcmUgcHJldmFsZW50LCByZXN1bHRpbmcgaW4gZGVjcmVhc2VkIGRpdmVyc2l0eSBbQFJ5Ymlja2kyMDIwXS4gIAoKVGhlIHJlY2VudGx5IHByb3Bvc2VkIFNMT1NTIGN1YmUgaHlwb3RoZXNpcyBieSBARmFocmlnMjAyMSBzZXJ2ZXMgYXMgYSBjb21wcmVoZW5zaXZlIGZyYW1ld29yayBzdW1tYXJpemluZyBleGlzdGluZyBTaW5nbGUgTGFyZ2Ugb3IgU2V2ZXJhbCBTbWFsbCAoU0xPU1MpIHByZWRpY3Rpb25zIGFuZCBlbXBpcmljYWwgZmluZGluZ3MuIFRoaXMgaHlwb3RoZXNpcyBwb3NpdHMgdGhhdCB0aGUgY29uZGl0aW9uIHdoZXJlIFNpbmdsZSBMYXJnZSAoU0wpIHBhdGNoZXMgY29udHJpYnV0ZSBtb3JlIHRvIGJpb2RpdmVyc2l0eSBjb25zZXJ2YXRpb24gdGhhbiBTZXZlcmFsIFNtYWxsIChTUykgcGF0Y2hlcyBpcyBjb250aW5nZW50IHVwb24gdGhlIHNpbXVsdGFuZW91cyBvY2N1cnJlbmNlIG9mIHNwZWNpZmljIGNvbmRpdGlvbnM6IGEgbG93IGJldHdlZW4tcGF0Y2ggbW92ZW1lbnQgcmF0ZSwgbWluaW1hbCBpbXBhY3Qgb2Ygc3ByZWFkaW5nLW9mLXJpc2sgb24gcG9wdWxhdGlvbiBkeW5hbWljcywgYW5kIGxvdyBzcGVjaWVzIHNwYXRpYWwgY2x1bXBpbmcgW0BGYWhyaWcyMDIxXS4KClRoaXMgcmVzZWFyY2ggYWltcyB0byBpbnZlc3RpZ2F0ZSBtdWx0aS1zcGVjaWVzIHNwYXRpYWxseSBleHBsaWNpdCBtb2RlbHMsIGluY29ycG9yYXRpbmcgYSBmaXhlZCBsZXZlbCBvZiBoYWJpdGF0IGRlc3RydWN0aW9uLCBuZXV0cmFsIGFuZCBjb21wZXRpdGl2ZSBjb21tdW5pdHkgZHluYW1pY3MsIGRpdmVyc2UgZGlzcGVyc2FsLXJlbGF0ZWQgdHJhaXRzLCBhbmQgdmFyaW91cyBnZW9tZXRyaWVzIG9mIGhhYml0YXQgbG9zcy4gVGhlIHByaW5jaXBhbCBvYmplY3RpdmUgaXMgdG8gdmVyaWZ5IHRoZSBjb25kaXRpb25zIHVuZGVyIHdoaWNoIHRoZSBTUyA+IFNMIHBhdHRlcm4gaG9sZHMgYW5kIGRpc2Nlcm4gdGhlIHVuZGVybHlpbmcgY2F1c2VzLiBUaHJvdWdoIHRoaXMgZXhhbWluYXRpb24sIHdlIHNlZWsgdG8gY29udHJpYnV0ZSBpbnNpZ2h0cyB0aGF0IGNhbiBoZWxwIGRldGVybWluZSBpZiB0aGUgY29uZGl0aW9ucyBvdXRsaW5lZCBpbiB0aGUgU0xPU1MgY3ViZSBoeXBvdGhlc2lzIGFyZSBzdXBwb3J0ZWQgYnkgb3VyIG1vZGVsaW5nIGFwcHJvYWNoLi4gCgpTcGVjaWZpY2FsbHksIG91ciBhcHByb2FjaCBpbnZvbHZlcyBzaW11bGF0aW5nIHNwZWNpZXMgcmV0ZW50aW9uIHVuZGVyIGRpdmVyc2UgZnJhZ21lbnRhdGlvbiBzY2VuYXJpb3MsIGFsbCBjaGFyYWN0ZXJpemVkIGJ5IGEgZml4ZWQgYW1vdW50IG9mIGhhYml0YXQgbG9zcy4gV2UgdmFyeSBwYXJhbWV0ZXJzIHN1Y2ggYXMgcGF0Y2ggc2l6ZXMsIGNvbW11bml0eSB0eXBlIChjb21wZXRpdGl2ZSBvciBuZXV0cmFsKSwgc3BlY2llcyBkaXNwZXJzYWwgY2FwYWJpbGl0aWVzLCBhbmQgdGhlIGNvbW11bml0eSdzIHBlcnNpc3RlbmNlIHN0YXR1c+KAlHdoZXRoZXIgaXQgaXMgbmVhciBleHRpbmN0aW9uIGFuZCBkZWdyYWRlZCBvciBpbiBhIGhlYWx0aHkgc3RhdGUuIFRoaXMgY29tcHJlaGVuc2l2ZSBleHBsb3JhdGlvbiBlbmFibGVzIHVzIHRvIGFjY291bnQgZm9yIHRoZSBpbnRlcmFjdGluZyBlZmZlY3RzIG9mIGhhYml0YXQgbG9zcyBhbmQgYSByYW5nZSBvZiBtb2RlbCBwYXJhbWV0ZXJzIG9uIHNwZWNpZXMgcmV0ZW50aW9uLgoKPCEtLSBJbiB0aGF0IGNvbnRleHQsIHNwYXRpYWwtZXhwbGljaXQgbXVsdGktc3BlY2llcyBtb2RlbGxpbmcgY291bGQgYmUgbWVhbmluZ2Z1bCBhcyBzZXZlcmFsIG9yZ2FuaXNtcyByZXRhaW4gZGlzcGVyc2FsIGRpc3RhbmNlIGFuZCBvdGhlciBkaXNwZXJzYWwtcmVsYXRlZCBsaWZlIHRyYWl0cyBmYXIgY29uc2lzdGVudGx5IGFtb25nIHNwZWNpZXMgKHF1b3RlcykuLS0+CgojIyBNZXRob2RzCgojIyMgQSBzcGF0aWFsIHN0b2NoYXN0aWMgbW9kZWwKCldlIGRldmVsb3BlZCBhIHNwYXRpYWxseSBleHBsaWNpdCBtdWx0aS1zcGVjaWVzIG1vZGVsIHRvIGV4cGxvcmUgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGhhYml0YXQgbG9zcyBhbmQgc3BlY2llcyByZXRlbnRpb24gYXQgdGhlIHJlZ2lvbmFsIG1ldGFwb3B1bGF0aW9uIGxldmVsLiBJbiB0aGlzIG1vZGVsLCBzcGFjZSBpcyBkaXNjcmV0aXplZCBpbnRvIGEgZ3JpZCBhbmQgb25seSBvbmUgaW5kaXZpZHVhbCBvZiBvbmUgc3BlY2llcyBjYW4gb2NjdXB5IGEgcGFydGljdWxhciBwb3NpdGlvbi4gRWFjaCBwb3NpdGlvbiByZXByZXNlbnRzIGFuIGFyZWEgZml4ZWQgYnkgdGhlIGludmVzdGlnYXRvciB0byBtaW1pYyB0aGUgcmVhbCBzeXN0ZW0uIFRpbWUgaXMgY29udGludW91cywgc28gdGhlIHVwZGF0ZSBvZiB0aGUgbW9kZWwgaXMgYXN5bmNocm9ub3VzLiBTaXRlcyBhcmUgc2VsZWN0ZWQgYXQgcmFuZG9tIGFuZCB0byBwZXJmb3JtIG9uZSBjb21wbGV0ZSB0aW1lIGludGVydmFsICRKJCBzaXRlcyBoYXZlIHRvIGJlIHVwZGF0ZWQsIHdoZXJlICRKJCBpcyB0aGUgc2l6ZSBvZiB0aGUgZ3JpZC4KCldlIHVzZSBhYnNvcmJpbmcgYm91bmRhcnkgY29uZGl0aW9ucywgd2hpY2ggbWVhbnMgdGhhdCBpZiBhbiBpbmRpdmlkdWFsIHRyaWVzIHRvIGRpc3BlcnNlIG91dHNpZGUgdGhlIGdyaWQgaXQgZGllcy4gVGhlIHNpemUgb2YgdGhlIGNvbW11bml0eSBpcyBnaXZlbiBieSAqSiA9IGRpbVgqIHggKmRpbVkqLCB3aGVyZSAqZGltWCogYW5kICpkaW1ZKiBhcmUgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGdyaWQuIFRodXMgKkoqIGlzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBpbmRpdmlkdWFscyBpbiB0aGUgc2ltdWxhdGVkIGFyZWEuIEFzIGluIGEgY2xhc3NpY2FsIG5ldXRyYWwgbW9kZWwsIHRoZXJlIGlzIGEgbWV0YWNvbW11bml0eSwgaS5lLiBhIHJlZ2lvbmFsIHNwZWNpZXMgcG9vbCBmcm9tIHdoZXJlIHNwZWNpZXMgbWlncmF0ZSBbQEh1YmJlbGwyMDAxXS4gQWxsIGluZGl2aWR1YWxzIGhhdmUgdGhlIHNhbWUgcGFyYW1ldGVycyBhbmQgZWFjaCBzcGVjaWVzIGlzIGFzc2lnbmVkIGFuIGluZGljYXRvciBudW1iZXIuIAoKVGhlIG1vZGVsIGNvbnNpc3RzIG9mIHRocmVlIHZhcmlhdGlvbnM6IGEgY2xhc3NpY2FsIG5ldXRyYWwgbW9kZWwsIGEgbmV1dHJhbCBtb2RlbCB3aXRoIGhhYml0YXQgc2VsZWN0aW9uLCBhbmQgYSBjb21wZXRpdGl2ZSBoaWVyYXJjaGljYWwgbW9kZWwuCgpUaGUgY2xhc3NpY2FsIG5ldXRyYWwgdmFyaWF0aW9uIGlzIHdoZXJlIHByb3BhZ3VsZXMgKGUuZy4sIHNlZWRzKSBkaXNwZXJzZSBwYXNzaXZlbHkgYW5kIGNhbm5vdCBhY3RpdmVseSBjaG9vc2UgdGhlaXIgZXN0YWJsaXNobWVudCBzaXRlLiBEdXJpbmcgcmVwcm9kdWN0aW9uIGV2ZW50cywgaW5kaXZpZHVhbHMgZGlzcGVyc2UgdGhlaXIgcHJvcGFndWxlcyBibGluZGx5IHRvIHN1cnJvdW5kaW5nIHBhdGNoZXMuIElmIGEgcGF0Y2ggaXMgYWxyZWFkeSBvY2N1cGllZCwgdGhlIHByb3BhZ3VsZSBmYWlscyB0byBlc3RhYmxpc2gsIHJlc3VsdGluZyBpbiBpdHMgZGVhdGguIFRoaXMgdmFyaWF0aW9uIGNhcHR1cmVzIHRoZSByYW5kb20gZGlzcGVyc2FsIGFuZCBjb2xvbml6YXRpb24gcHJvY2Vzc2VzIHR5cGljYWwgb2YgbWFueSBwbGFudCBzcGVjaWVzLgoKVGhlIG5ldXRyYWwgdmFyaWF0aW9uIHdpdGggaGFiaXRhdCBzZWxlY3Rpb24gaXMgd2hlcmUgaW5kaXZpZHVhbHMgY2FuIGFjdGl2ZWx5IHNlbGVjdCBzdWl0YWJsZSBoYWJpdGF0IHBhdGNoZXMuIEluIHRoaXMgdmFyaWF0aW9uLCBwcm9wYWd1bGVzIGNhbiBjaG9vc2UgdW5vY2N1cGllZCBwYXRjaGVzLCBlbnN1cmluZyB0aGVpciBzdXJ2aXZhbCBhbmQgc3VjY2Vzc2Z1bCBlc3RhYmxpc2htZW50LiBUaGlzIG1vZGlmaWNhdGlvbiByZWZsZWN0cyB0aGUgaW5mbHVlbmNlIG9mIGhhYml0YXQgYXZhaWxhYmlsaXR5IGFuZCBzZWxlY3Rpb24gb24gc3BlY2llcyBjb2xvbml6YXRpb24gYW5kIHBlcnNpc3RlbmNlLiBCeSBpbmNvcnBvcmF0aW5nIGhhYml0YXQgc2VsZWN0aW9uLCB0aGlzIHZhcmlhdGlvbiBiZXR0ZXIgY2FwdHVyZXMgdGhlIGVjb2xvZ2ljYWwgcHJvY2Vzc2VzIGFuZCBiZWhhdmlvcnMgb2Ygc3BlY2llcyB0aGF0IGFyZSBjYXBhYmxlIG9mIGFjdGl2ZWx5IHNlZWtpbmcgb3V0IHN1aXRhYmxlIGhhYml0YXRzIGZvciByZXByb2R1Y3Rpb24gYW5kIHN1cnZpdmFsLCBsaWtlIG1vc3QgYW5pbWFscwoKVGhlIGNvbXBldGl0aXZlIGhpZXJhcmNoaWNhbCB2YXJpYXRpb24gZXh0ZW5kcyB0aGUgbmV1dHJhbCB2YXJpYXRpb24gd2l0aCBhbiBhZGRpdGlvbmFsIGxheWVyIG9mIGNvbXBsZXhpdHkgYnkgaW5jb3Jwb3JhdGluZyBjb21wZXRpdGl2ZSBpbnRlcmFjdGlvbnMgYW1vbmcgc3BlY2llcy4gRWFjaCBzcGVjaWVzIGhhcyBhbiBpbmRpY2F0b3IgbnVtYmVyIHRoYXQgZGV0ZXJtaW5lcyBpdHMgY29tcGV0aXRpdmUgZG9taW5hbmNlIGxldmVsLCBhbmQgbW9yZSBkb21pbmFudCBzcGVjaWVzIGNhbiByZXBsYWNlIGxlc3MgZG9taW5hbnQgb25lcyBhdCBhIHNwZWNpZmllZCByZXBsYWNlbWVudCByYXRlLiBUaGlzIHZhcmlhdGlvbiBjYXB0dXJlcyB0aGUgaW5mbHVlbmNlIG9mIHNwZWNpZXMgaW50ZXJhY3Rpb25zIGFuZCBjb21wZXRpdGl2ZSBleGNsdXNpb24gb24gc3BlY2llcyBjb21wb3NpdGlvbiBhbmQgYWJ1bmRhbmNlLiBJdCBpcyBwYXJ0aWN1bGFybHkgcmVsZXZhbnQgZm9yIHVuZGVyc3RhbmRpbmcgY29tbXVuaXRpZXMgd2hlcmUgY29tcGV0aXRpdmUgaW50ZXJhY3Rpb25zIHBsYXkgYSBzaWduaWZpY2FudCByb2xlIGluIHNoYXBpbmcgc3BlY2llcyBkaXN0cmlidXRpb25zIGFuZCBjb21tdW5pdHkgc3RydWN0dXJlIChlLmcuLCBodW1taW5nYmlyZHMpLgoKVGhlIGZvbGxvd2luZyBwcm9jZXNzZXMgYXJlIGluY2x1ZGVkIGluIHRoZSBtb2RlbDogaGFiaXRhdCBsb3NzLCBtaWdyYXRpb24sIHJlcHJvZHVjdGlvbiwgbG9jYWwgZGlzcGVyc2FsLCBjb21wZXRpdGlvbiBhbmQgZGVhdGguIEFmdGVyIHNldHRpbmcgaW5pdGlhbCBjb25kaXRpb25zIHRoZSBmb2xsb3dpbmcgZXZlbnRzIGNhbiBoYXBwZW46CiAgCigxKSBIYWJpdGF0IGxvc3M6IHRoZSBzaXRlcyBhcmUgbWFya2VkIGFzIG5vbi1oYWJpdGFibGUsIG1ha2luZyB0aGVtIHVuc3VpdGFibGUgZm9yIG9jY3VwYW5jeSwgdXAgdG8gYSBmaXhlZCBwZXJjZW50YWdlIG9mIGRlZ3JhZGVkIGhhYml0YXQuIERpZmZlcmVudCBkZWdyYWRhdGlvbiBzY2VuYXJpb3MgYXJlIG1vZGVsZWQ6CgogICAgUmVndWxhciBkZWdyYWRhdGlvbjogSGFiaXRhdCBpcyByZW1vdmVkIHNvIHRoYXQgaGFiaXRhYmxlIHBhdGNoZXMgZm9ybSBhIHJlZ3VsYXIgcGF0dGVybiBvZiBzcXVhcmVzIHdpdGggc2lkZXMgZ2l2ZW4gYnkgYSBoYWJpdGF0LXNpemUgcGFyYW1ldGVyLiBBcyB0aGUgcGVyY2VudGFnZSBvZiBkZWdyYWRlZCBoYWJpdGF0IGlzIGNvbnN0YW50IHZhcnlpbmcgdGhlIGhhYml0YXQtc2l6ZSBwYXJhbWV0ZXIgcmVzdWx0cyBpbiBlaXRoZXIgYSBmZXcgbGFyZ2UgaGFiaXRhdCBwYXRjaGVzIChTTCkgb3Igc2V2ZXJhbCBzbWFsbCAoU1MpLgoKICAgIFJhbmRvbSBibG9jayBkZWdyYWRhdGlvbjogSGFiaXRhdCBzcXVhcmUgcGF0Y2hlcyBvZiBhIGZpeGVkIHNpemUgKGhhYml0YXQtc2l6ZSBwYXJhbWV0ZXIpIGFyZSBsb2NhdGVkIGF0IHJhbmRvbSB0aHJvdWdob3V0IHRoZSBsYW5kc2NhcGUuIFRoZSBzaXplcyBhcmUgaWRlbnRpY2FsIHRvIHRob3NlIHVzZWQgZm9yIHJlZ3VsYXIgZGVncmFkYXRpb24gc2ltdWxhdGlvbnMsIGJ1dCBpdCByZXN1bHRzIGluIGhhYml0YXQgcGF0Y2hlcyB0aGF0IGhhdmUgYSBtaW5pbXVtIHNpemUgY29ycmVzcG9uZGluZyB0byB0aGUgaGFiaXRhdC1zaXplIGJ1dCBhIG1heGltdW0gc2l6ZSB0aGF0IGlzIGJpZ2dlciBiZWNhdXNlIGhhYml0YXQgcGF0Y2hlcyBjYW4gb3ZlcmxhcCBiZXR3ZWVuIHRoZW0gcHJvZHVjaW5nIGEgbGFyZ2VyIHBhdGNoLiBUaGVuLCB3ZSBjaGFyYWN0ZXJpemUgdGhpcyB3aXRoIHRoZSBtYXhpbXVtIGhhYml0YXQgcGF0Y2ggc2l6ZS4gCgooMikgV2l0aCAkbWlncmF0aW9uLXJhdGUkIGFuIGluZGl2aWR1YWwgb2YgYSBzcGVjaWVzICRpJCBjYW4gbWlncmF0ZSBmcm9tIHRoZSBtZXRhY29tbXVuaXR5LiBBIHJhbmRvbSBzaXRlIG9uIHRoZSBib3JkZXIgb2YgdGhlIGdyaWQgaXMgc2VsZWN0ZWQgYW5kIGlmIGl0IGlzIGVtcHR5IGFuZCBoYWJpdGFibGUgdGhlIHNpdGUgaXMgb2NjdXBpZWRbZF0uCgooMykgQWxsIGluZGl2aWR1YWxzIHJlcHJvZHVjZSB3aXRoICRiaXJ0aC1yYXRlJC4gV2hlbiBhbiBpbmRpdmlkdWFsIHJlcHJvZHVjZXMgdGhlIHByb3BhZ3VsZSBkaXNwZXJzZXMgdG8gdGhlIG5laWdoYm9yaG9vZCB3aXRoIGEgZGlzcGVyc2FsIGtlcm5lbC4gSGVyZSB3ZSB1c2UgYW4gaW52ZXJzZSBwb3dlciBrZXJuZWwgW0BNYXJjbzIwMTFdOgoKICAgICRkKHgpID0gIFxsZWZ0KFxmcmFje3h9e3hfe21pbn19IFxyaWdodCleey1cYWxwaGF9JCB3aXRoICRtZWFuID1cZnJhY3tcYWxwaGEtMX17XGFscGhhLTJ9eF97bWlufSQgd2hlcmUgJFxhbHBoYSA+IDEkIGFuZCAkeCBcZ2UgeF97bWlufSQuIAoKICAgIHdoZXJlICRkKHgpJCBpcyB0aGUgcHJvYmFiaWxpdHkgdGhhdCBhbiBpbmRpdmlkdWFsIGRpc3BlcnNlcyBhIGRpc3RhbmNlICR4JCBmcm9tIHRoZSBwYXJlbnQuIEluIGFsbCBjYXNlcywgd2UgdXNlZCAkeF97bWlufSA9IDEkLiBXZSB1c2UgYXMgYSBwYXJhbWV0ZXIgdGhlIG1lYW4gJGRpc3BlcnNhbC1kaXN0YW5jZSQuIAoKICAgIFdoYXQgaGFwcGVucyB0byB0aGUgcHJvcGFndWxlIHdoZW4gYXJyaXZlcyBhdCB0aGUgc2VsZWN0ZWQgc2l0ZSBpcyBkZXRlcm1pbmVkIGJ5IHRoZSB2YXJpYXRpb24gb2YgdGhlIG1vZGVsIHNpbXVsYXRlZDoKCiAgICBhLiBDbGFzc2ljYWwgTmV1dHJhbDogSWYgdGhlIHRhcmdldCBwYXRjaCBpcyBhbHJlYWR5IG9jY3VwaWVkIGJ5IGEgc3BlY2llcywgdGhlIHByb3BhZ3VsZSBwZXJpc2hlcy4gCgogICAgYi4gTmV1dHJhbCB3aXRoIEhhYml0YXQgU2VsZWN0aW9uOiAgUHJvcGFndWxlcyBzZWxlY3RpdmVseSB0YXJnZXQgdW5vY2N1cGllZCBwYXRjaGVzIGZvciByZXByb2R1Y3Rpb24gd2l0aGluIHRoZSBkaXN0YW5jZSBnaXZlbiBieSB0aGUgZGlzcGVyc2FsIGtlcm5lbCwgZW5zdXJpbmcgdGhlaXIgc3Vydml2YWwuIAoKICAgIGMuIENvbXBldGl0aXZlIEhpZXJhcmNoaWNhbDogU3BlY2llcyBhcmUgcmFua2VkIGJ5IGEgY29tcGV0aXRpdmUgZG9taW5hbmNlIGhpZXJhcmNoeSBiYXNlZCBvbiB0aGVpciBpbnRlcm5hbCBpZGVudGlmaWNhdGlvbiAgIChpZCkgbnVtYmVyLiBJZiBhIGRpc3BlcnNpbmcgcHJvcGFndWxlIGFycml2ZXMgYXQgYW4gb2NjdXBpZWQgc2l0ZSwgaXQgd2lsbCBvbmx5IGJlIGVzdGFibGlzaGVkIGlmIGl0cyBpZCBudW1iZXIgaXMgaGlnaGVyIHRoYW4gdGhlIHJlc2lkZW50IHNwZWNpZXMuIE90aGVyd2lzZSwgdGhlIHByb3BhZ3VsZSBwZXJpc2hlcyB3aXRob3V0IGVzdGFibGlzaGluZy4gVGhpcyBzaW11bGF0ZXMgYSBzeXN0ZW0gd2hlcmUgZG9taW5hbnQgY29tcGV0aXRvciBzcGVjaWVzIGRpc3BsYWNlIHJhcmVyIG9yIHdlYWtlciBzcGVjaWVzIHRocm91Z2ggaW50ZXJzcGVjaWZpYyBjb21wZXRpdGlvbiBkdXJpbmcgY29sb25pemF0aW9uIG9mIG5ldyBzaXRlcy4gVGhlIGhpZXJhcmNoeSBwcmlvcml0aXplcyBzcGVjaWVzIHdpdGggbG93ZXIgaWQgbnVtYmVycyBhcyBzdHJvbmdlciBjb21wZXRpdG9ycy4KICAgIAooNCkgSW5kaXZpZHVhbHMgZGllIHdpdGggYSAkZGVhdGgtcmF0ZSQgaW5kZXBlbmRlbnQgb2Ygb3RoZXIgZXZlbnRzLiAKCkZvciBhbGwgc2ltdWxhdGlvbnMsIHdlIHVzZWQgYSBtZXRhY29tbXVuaXR5IG9mIDEwMCBzcGVjaWVzLiBUaGUgc2ltdWxhdGlvbnMgc3RhcnQgd2l0aCB0aGUgY29sb25pemF0aW9uIG9mIGFuIGVtcHR5IGhhYml0YXQgYXJlYS4gQWZ0ZXIgNjAwIHRpbWUgc3RlcHMsIGEgZml4ZWQgYW1vdW50IG9mIDYwJSBvZiBoYWJpdGF0IGlzIHN1YnNlcXVlbnRseSBzdWJqZWN0ZWQgdG8gZGVzdHJ1Y3Rpb24sIGVtcGxveWluZyByZWd1bGFyIG9yIHJhbmRvbSBibG9jayBkZWdyYWRhdGlvbiB0byBtaW1pYyBoYWJpdGF0IGZyYWdtZW50YXRpb24gZHVlIHRvIGhhYml0YXQgbG9zcy4gPCEtLSB3aHkgd2UgZG9uJ3QgdXNlIGNvbXBsZXRlbHkgcmFuZG9tIGRlZ3JhZGF0aW9uIHBhdHRlcm5zIC0tPgoKfCAkXGxhbWJkYSQgfCBEaXNwZXJzYWwgRGlzdGFuY2UgfCBIYWJpdGF0IFBhdGNoIHNpemUgfAp8IC0tLS0tLS0tOiB8IC0tLS0tLS0tLTogICAgICAgICB8IC0tLS0tLS0tLTogICAgICAgICB8CnwgMS43ICAgICAgIHwgMS4xICAgICAgICAgICAgICAgIHwgMyAgICAgICAgICAgICAgICAgIHwKfCAyLjAgICAgICAgfCAxLjIgICAgICAgICAgICAgICAgfCA5ICAgICAgICAgICAgICAgICAgfAp8IDMuMCAgICAgICB8IDEuNSAgICAgICAgICAgICAgICB8IDI5ICAgICAgICAgICAgICAgICB8CnwgNC4wICAgICAgIHwgMiAgICAgICAgICAgICAgICAgIHwgNjEgICAgICAgICAgICAgICAgIHwKfCAgICAgICAgICAgfCAzICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgfAoKVGFibGU6IFBhcmFtZXRlciB2YWx1ZXMgdXRpbGl6ZWQgaW4gc2ltdWxhdGlvbnMsIHdpdGggZmFjdG9yaWFsIGNvbWJpbmF0aW9ucyBvZiB0aGVzZSBwYXJhbWV0ZXJzIGVtcGxveWVkIHRvIHJ1biBzaW11bGF0aW9ucy4gVGhlIHN5bWJvbCAkXGxhbWJkYSQgcmVwcmVzZW50cyB0aGUgcmF0aW8gb2YgZ3Jvd3RoIHJhdGUgdG8gZGVhdGggcmF0ZS4gIkRpc3BlcnNhbCBkaXN0YW5jZSIgZGVub3RlcyB0aGUgbWVhbiBvZiB0aGUgcG93ZXIgbGF3IGRpc3BlcnNhbCBrZXJuZWwsIHdoaWxlICJIYWJpdGF0IHBhdGNoIHNpemUiIGluZGljYXRlcyB0aGUgc2lkZSBsZW5ndGggb2YgaGFiaXRhdCBwYXRjaGVzIG1vZGVsZWQgYXMgc3F1YXJlcy4gQm90aCB0aGUgZGlzcGVyc2FsIGRpc3RhbmNlIGFuZCBoYWJpdGF0IHBhdGNoIHNpemUgYXJlIG1lYXN1cmVkIGluIGdyaWQgY2VsbHMuCgoKVGhlIHBhcmFtZXRlcnMgZW5jb21wYXNzIGEgcmFuZ2Ugb2YgJGdyb3d0aC1yYXRlcyQgd2hpbGUgaG9sZGluZyB0aGUgJGRlYXRoLXJhdGUkIGZpeGVkIGF0IDEuIEluIHRoaXMgbW9kZWwsIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGVzZSBwYXJhbWV0ZXJzLCAkXGxhbWJkYSA9IGdyb3d0aC1yYXRlIC8gZGVhdGgtcmF0ZSQsIGlzIHRoZSBtYWluIGRldGVybWluYW50IG9mIHRoZSBmYXRlIG9mIGFuIGluZGl2aWR1YWwgb2YgYSBzcGVjaWVzLiBJbiBzaW1pbGFyIG5vbi1zcGF0aWFsIG1vZGVscywgdGhpcyByZWxhdGlvbnNoaXAgbXVzdCBleGNlZWQgMSBmb3IgYSBzcGVjaWVzIHRvIHBlcnNpc3QuIFRodXMgd2UgdXNlZCBhIG1pbmltdW0gJFxsYW1iZGEkIG9mIDEuNywgd2UgYWxzbyBmaXhlZCB0aGUgJG1pZ3JhdGlvbi1yYXRlJCBhdCAwLjAwMDEuIFdlIHNpbXVsYXRlIGVhY2ggbW9kZWwgdmFyaWFudCB1c2luZyB0aGUgcGFyYW1ldGVycyBzaG93biBpbiBUYWJsZSAxLiBGb3IgdGhlIG5ldXRyYWwgY2xhc3NpY2FsIHZlcnNpb24gb25seSwgd2UgYWxzbyBzaW11bGF0ZSByYW5kb20gYmxvY2sgaGFiaXRhdCBwYXR0ZXJucy4gRm9yIGVhY2ggY29tYmluYXRpb24gb2YgcGFyYW1ldGVycyB3ZSByYW4gMzAgc2ltdWxhdGlvbnMgdXAgdG8gMTUwMCB0aW1lIHN0ZXBzIGFuZCByZWNvcmRlZCB0aGUgbnVtYmVyIG9mIHNwZWNpZXMsIHRoZSBTaGFubm9uIERpdmVyc2l0eSBpbmRleCBbQE1hZ3VycmFuMjAxM10gYW5kIHRoZSB0b3RhbCBudW1iZXIgb2YgaW5kaXZpZHVhbHMuIEZvciBzb21lIHJlcHJlc2VudGF0aXZlIGNvbWJpbmF0aW9ucyBvZiBwYXJhbWV0ZXJzLCB3ZSB0YWtlIHNuYXBzaG90cyBvZiB0aGUgbW9kZWwgb3V0cHV0IHNob3dpbmcgdGhlIHR5cGljYWwgZHluYW1pY3Mgb24gdGltZSBvZiB0aGUgMyByZWNvcmRlZCBxdWFudGl0aWVzIGFuZCB0aGUgcmFuayBhYnVuZGFuY2Ugc3BlY2llcyBkaXN0cmlidXRpb24gW0BOZXdtYW4yMDA1OyBATWF5MTk3NV0gIAoKVGhlIGNsYXNzaWNhbCBuZXV0cmFsIG1vZGVsIGFuZCB0aGUgaGFiaXRhdCBzZWxlY3Rpb24gbW9kZWwgY291bGQgcmVwcmVzZW50IGVuZHBvaW50cyBvbiBhIGNvbnRpbnV1bSBvZiBtb2RlbHMgd2hlcmUgdGhlIG1hdHJpeCBpcyBlaXRoZXIgY29tcGxldGVseSBhZHZlcnNlIG9yIG5vdCBhZHZlcnNlIGJ1dCBzdGlsbCB1bnN1aXRhYmxlIGZvciByZXByb2R1Y3Rpb24uIEluIHRoZSBoYWJpdGF0IHNlbGVjdGlvbiBtb2RlbCwgaW5kaXZpZHVhbHMgY2FuIHNlYXJjaCBhY3Jvc3MgYm90aCB0aGUgbWF0cml4IGFuZCBzdWl0YWJsZSBoYWJpdGF0IHVudGlsIHRoZXkgZmluZCBhbiBlbXB0eSBwbGFjZS4gSW4gY29udHJhc3QsIGZvciB0aGUgY2xhc3NpY2FsIG5ldXRyYWwgbW9kZWwsIGluZGl2aWR1YWxzIGhhdmUgbGltaXRlZCBvciBubyBjYXBhY2l0eSB0byBzZWFyY2gsIGFuZCB0aGUgbWF0cml4IGlzIG5lY2Vzc2FyaWx5IGRldHJpbWVudGFsIGJlY2F1c2UgaXQgaW5jcmVhc2VzIHRoZSBwcm9iYWJpbGl0eSBvZiBkZWF0aCBieSBsYW5kaW5nIG9uIGFuIHVuc3VpdGFibGUgc2l0ZS4KClRoZSBtb2RlbCB3YXMgZGV2ZWxvcGVkIGluIE5ldGxvZ28gNi4zLjAgYW5kIHRoZSBtb2RlbCBzb3VyY2UgY29kZSBpcyBhdmFpbGFibGUgYXQgR2l0aHViIDxodHRwczovLz4sIHRoZSBPdmVydmlldywgRGVzaWduIGNvbmNlcHRzLCBEZXRhaWxzIChPREQpLCBwcm90b2NvbCBmb3IgZGVzY3JpYmluZyBpbmRpdmlkdWFsLWJhc2VkIG1vZGVscyBpcyBpbmNsdWRlZCB3aXRoaW4gdGhlIG1vZGVsIHNvdXJjZSBjb2RlIFtAR3JpbW0yMDEwXS4gV2UgcGVyZm9ybWVkIHRoZSBzaW11bGF0aW9ucyBhbmQgYW5hbHlzaXMgdXNpbmcgUiB2ZXJzaW9uIDQuMy4xIFtAUkNvcmVUZWFtMjAyM10sIHRoZSBSIHNvdXJjZSBjb2RlIHRvIHBlcmZvcm0gc2ltdWxhdGlvbnMgYW5kIGFuYWx5c2lzIGlzIGxvY2F0ZWQgYXQgPGh0dHBzOi8vPi4gCgojIyBSZXN1bHRzCgpJbiBvdXIgbmV1dHJhbCBtb2RlbCBzaW11bGF0aW9ucyB3aXRoIGEgbWlncmF0aW9uIHJhdGUgb2YgJDAuMDAwMSQgYW5kIHJlZ3VsYXIgaGFiaXRhdCBwYXR0ZXJucywgc3BlY2llcyByaWNobmVzcyB2YXJpZWQgd2l0aCBoYWJpdGF0IHBhdGNoIHNpemVzLCBpbmZsdWVuY2VkIGJ5IGRpc3BlcnNhbCBkaXN0YW5jZSBhbmQgdGhlICRcbGFtYmRhJCBwYXJhbWV0ZXIgKEZpZ3VyZSAxKS4gU3BlY2llcyByaWNobmVzcyBpbmNyZWFzZWQgd2l0aCAkXGxhbWJkYSQsIHdpdGggdGhlIGhpZ2hlc3QgcmljaG5lc3MgYXQgc21hbGxlciBwYXRjaCBzaXplcyBmb3IgaGlnaGVyICRcbGFtYmRhJCB2YWx1ZXMuIENvbnZlcnNlbHksIGEgJFxsYW1iZGEkIG9mIDMgb3IgbGVzcyBzaG93ZWQgcmVkdWNlZCByaWNobmVzcyBhdCB0aGUgc21hbGxlc3QgcGF0Y2ggc2l6ZXMgZm9yIGxvd2VyIGRpc3BlcnNhbCBkaXN0YW5jZXMuIEluIHRoZXNlIGNhc2VzLCBvbmx5IG1pZ3JhbnRzIHN1cnZpdmUgaW4gdGhlIHNtYWxsZXN0IHBhdGNoZXMsIGFuZCBubyBsb2NhbCBwb3B1bGF0aW9ucyBhcmUgZXN0YWJsaXNoZWQgKEZpZ3VyZXMgUzEzICYgUzE0KS4KVGhlIGludGVycGxheSBvZiBkaXNwZXJzYWwgZGlzdGFuY2VzLCBoYWJpdGF0IHNpemVzLCBhbmQgJFxsYW1iZGEkIGltcGFjdHMgY29tbXVuaXR5IHN1cnZpdmFsIGFuZCBzcGVjaWVzIHJpY2huZXNzLiBGb3IgJFxsYW1iZGEgPCA0JCB0aGlzIHN1Z2dlc3RzIGEgdGhyZXNob2xkIHBhdGNoIHNpemUgaW5mbHVlbmNlZCBieSB0aGVzZSAzIHBhcmFtZXRlcnMsIGZvciAkXGxhbWJkYSA9IDQkIHBhdGNoIHNpemUgZGVjcmVhc2VzIHNwZWNpZXMgcmljaG5lc3MuIFRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGluY3JlYXNpbmcgJFxsYW1iZGEkJ3MgYWxtb3N0IGRpc2FwcGVhciB3aGVuIGRpc3BlcnNhbCBkaXN0YW5jZSBpcyBoaWdoZXIuIEV4dGVuZGVkIGRpc3BlcnNhbCBkaXN0YW5jZXMgY291bGQgZW5oYW5jZSBzcGVjaWVzIHN1cnZpdmFsIGluIHNjZW5hcmlvcyB3aXRoIGxvdyAkXGxhbWJkYSQgYW5kIHNtYWxsZXIgcGF0Y2hlcyBidXQgcmVkdWNlIHJpY2huZXNzIGJleW9uZCBhIGNlcnRhaW4gdGhyZXNob2xkLiBTaW1pbGFyIHBhdHRlcm5zIGFyZSBldmlkZW50IGZvciBTaGFubm9uIGRpdmVyc2l0eSAoRmlndXJlIDIpLiAKCiFbUmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIG51bWJlciBvZiBzcGVjaWVzIGFuZCBoYWJpdGF0IHBhdGNoIHNpemUgZm9yIHZhcnlpbmcgZGlzcGVyc2FsIGRpc3RhbmNlcyBhbmQgJFxsYW1iZGEkIHBhcmFtZXRlciAoYWNyb3NzIHBhbmVscykuIFNpbXVsYXRpb25zIHdlcmUgcGVyZm9ybWVkIHVzaW5nIGEgbmV1dHJhbCBtb2RlbCB3aXRoIGEgY29uc3RhbnQgbWlncmF0aW9uIHJhdGUgKDAuMDAwMSkuIEZvbGxvd2luZyAyMDAgdGltZSBzdGVwcyBvZiB0aGUgbW9kZWwsIDYwJSBvZiB0aGUgaGFiaXRhdCB3YXMgZGVzdHJveWVkLCByZW5kZXJpbmcgaXQgdW5hdmFpbGFibGUgZm9yIHRoZSBzcGVjaWVzLiBUaGUgZGVzdHJ1Y3Rpb24gb2YgaGFiaXRhdCByZXN1bHRlZCBpbiB0aGUgZm9ybWF0aW9uIG9mIHJlZ3VsYXIgcGF0dGVybnMsIHdoZXJlIGFsbCByZW1haW5pbmcgcGF0Y2hlcyBleGhpYml0ZWQgZXF1YWwgc2l6ZXMuXShGaWd1cmVzL1NwZWNpZXNfSGFiaXRhdF9EaXNwZXJzYWxfTGFtYmRhX3JlZ3VsYXIucG5nKQoKIVtSZWxhdGlvbnNoaXAgYmV0d2VlbiBTaGFubm9uIERpdmVyc2l0eSBhbmQgaGFiaXRhdCBwYXRjaCBzaXplIGZvciB2YXJ5aW5nIGRpc3BlcnNhbCBkaXN0YW5jZXMgYW5kICRcbGFtYmRhJCBwYXJhbWV0ZXIgKGFjcm9zcyBwYW5lbHMpLiBTaW11bGF0aW9ucyB3ZXJlIHBlcmZvcm1lZCB1c2luZyBhIG5ldXRyYWwgbW9kZWwgd2l0aCBhIGNvbnN0YW50IG1pZ3JhdGlvbiByYXRlICgwLjAwMDEpLiBGb2xsb3dpbmcgMjAwIHRpbWUgc3RlcHMgb2YgdGhlIG1vZGVsLCA2MCUgb2YgdGhlIGhhYml0YXQgd2FzIGRlc3Ryb3llZCwgcmVuZGVyaW5nIGl0IHVuYXZhaWxhYmxlIGZvciB0aGUgc3BlY2llcy4gVGhlIGRlc3RydWN0aW9uIG9mIGhhYml0YXQgcmVzdWx0ZWQgaW4gdGhlIGZvcm1hdGlvbiBvZiByZWd1bGFyIHBhdHRlcm5zLCB3aGVyZSBhbGwgcmVtYWluaW5nIHBhdGNoZXMgZXhoaWJpdGVkIGVxdWFsIHNpemVzLl0oRmlndXJlcy9TaGFubm9uX0hhYml0YXRfRGlzcGVyc2FsX0xhbWJkYV9yZWd1bGFyLnBuZykKCkZvciB0aGUgc2ltdWxhdGlvbnMgY29uZHVjdGVkIHdpdGggcmFuZG9tbHkgYXJyYW5nZWQgYmxvY2sgaGFiaXRhdCBwYXR0ZXJucywgdGhlIHBhdGNoZXMgZXhoaWJpdCB2YXJpYWJsZSBzaXplcywgZm9sbG93aW5nIGEgZGlzdHJpYnV0aW9uIHdpdGggYSBtaW5pbXVtIHNpemUgZGV0ZXJtaW5lZCBieSB0aGUgcGF0Y2gtc2l6ZSBwYXJhbWV0ZXIgYW5kIGEgbGFyZ2VyIG1heGltdW0gc2l6ZSBkZXRlcm1pbmVkIGJ5IHRoZSBzdXBlcnBvc2l0aW9uIG9mIHNldmVyYWwgcGF0Y2hlcyAoRmlndXJlcyBTOSAtIFMxMSkuIFRoZSBvdmVyYWxsIHBhdHRlcm4gaXMgYW5hbG9nb3VzIHRvIHRoZSByZWd1bGFyIGNhc2UsIHdpdGggYSBwZWFrIGluIHJpY2huZXNzIG9jY3VycmluZyBmb3IgaW50ZXJtZWRpYXRlIHBhdGNoIHNpemVzLiBIb3dldmVyLCBmb3IgdmFsdWVzIG9mICRcbGFtYmRhJCBoaWdoZXIgdGhhbiAyLCB0aGUgbWF4aW11bSByaWNobmVzcyBpcyBvYnNlcnZlZCBhdCB0aGUgc21hbGxlciBoYWJpdGF0IHBhdGNoIHNpemUgKEZpZ3VyZSBTMSAmIFMyKS4gVGhlIHBhdGNoZXMgaW4gdGhlIHJhbmRvbSBibG9jayBzaW11bGF0aW9ucyBhcmUgZ2VuZXJhbGx5IGxhcmdlciwgcmVzdWx0aW5nIGluIGxvd2VyIHNwZWNpZXMgcmljaG5lc3MgYW5kIGRpdmVyc2l0eSwgZXhjZXB0IGZvciB0aGUgbWluaW11bSBwYXRjaCBzaXplIChGaWd1cmUgUzcgJiBTOCkuIFN1cHBsZW1lbnRhcnkgbWF0ZXJpYWwgKEZpZ3VyZXMgUzkgJiBTMzIpIGluY2x1ZGVzIGV4YW1wbGVzIG9mIHNpbXVsYXRpb25zIHdpdGggcmFuZG9tIGJsb2NrIGFuZCByZWd1bGFyIGhhYml0YXQgcGF0dGVybnMuIEluIHRoZXNlIGZpZ3VyZXMsIGl0IGlzIGV2aWRlbnQgdGhhdCBmb3IgdGhlIG1pbmltdW0gcGF0Y2ggc2l6ZSwgb25seSBtaWdyYW50cyBzdXJ2aXZlIGluIHJlZ3VsYXIgaGFiaXRhdCBwYXR0ZXJucyB3aXRoIG5ldXRyYWwgYW5kIGhpZXJhcmNoaWNhbCBtb2RlbHMuCgohW1JlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSBudW1iZXIgb2Ygc3BlY2llcyBhbmQgaGFiaXRhdCBwYXRjaCBzaXplIGZvciBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIG1vZGVsIChhY3Jvc3MgcGFuZWxzKSBhbmQgdmFyeWluZyBkaXNwZXJzYWwgZGlzdGFuY2VzLiBUaGUgbmV1dHJhbCBpcyB0aGUgY2xhc3NpY2FsIG5ldXRyYWwgbW9kZWwsIHNwZWNpZXMgYXJlIGVxdWl2YWxlbnQgYW5kIGhhdmUgdGhlIHNhbWUgcGFyYW1ldGVyczsgaW4gdGhlIGhpZXJhcmNoaWNhbCBtb2RlbCwgc3BlY2llcyBoYXZlIGNvbXBldGl0aXZlIGRvbWluYW5jZSBhbmQgbW9yZSBkb21pbmFudCBvbmVzIGNhbiByZXBsYWNlIHRoZSBsZXNzIGRvbWluYW50OyB0aGUgbmV1dHJhbC13aXRoLWhhYml0YXQtc2VsZWN0aW9uIG1vZGVsLCBpcyBhIG5ldXRyYWwgbW9kZWwgYnV0IHByb3BhZ3VsZXMgc2VhcmNoIGFuIGVtcHR5IHBhdGNoIHNvIHRoZWlyIHN1cnZpdmFsIGlzIGVuc3VyZWQuIFNpbXVsYXRpb25zIHdlcmUgcGVyZm9ybWVkIHVzaW5nIGEgZml4ZWQgZ3Jvd3RoIHJhdGUgKDIpLCBtaWdyYXRpb24gYW5kIHJlcGxhY2VtZW50IHJhdGUgb2YgMC4wMDAxIGFuZCAwLjMgcmVzcGVjdGl2ZWx5LiBGb2xsb3dpbmcgMjAwIHRpbWUgc3RlcHMgb2YgdGhlIG1vZGVsLCA2MCUgb2YgdGhlIGhhYml0YXQgd2FzIGRlc3Ryb3llZCwgcmVuZGVyaW5nIGl0IHVuYXZhaWxhYmxlIGZvciB0aGUgc3BlY2llcy4gVGhlIGRlc3RydWN0aW9uIG9mIGhhYml0YXQgcmVzdWx0ZWQgaW4gdGhlIGZvcm1hdGlvbiBvZiByZWd1bGFyIHBhdHRlcm5zLCB3aGVyZSBhbGwgcmVtYWluaW5nIHBhdGNoZXMgZXhoaWJpdGVkIGVxdWFsIHNpemVzLl0oRmlndXJlcy9BY3Jvc3NCZWhhdl9TcGVjaWVzX0Rpc3BlcnNhbF9MYW1iZGEyX3JlZ3VsYXIucG5nKQoKIVtSZWxhdGlvbnNoaXAgYmV0d2VlbiBTaGFubm9uIERpdmVyc2l0eSBhbmQgaGFiaXRhdCBwYXRjaCBzaXplIGZvciBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIG1vZGVsIChhY3Jvc3MgcGFuZWxzKSBhbmQgdmFyeWluZyBkaXNwZXJzYWwgZGlzdGFuY2VzLiBUaGUgbmV1dHJhbCBpcyB0aGUgY2xhc3NpY2FsIG5ldXRyYWwgbW9kZWwsIHNwZWNpZXMgYXJlIGVxdWl2YWxlbnQgYW5kIGhhdmUgdGhlIHNhbWUgcGFyYW1ldGVyczsgaW4gdGhlIGhpZXJhcmNoaWNhbCBtb2RlbCwgc3BlY2llcyBoYXZlIGNvbXBldGl0aXZlIGRvbWluYW5jZSBhbmQgbW9yZSBkb21pbmFudCBvbmVzIGNhbiByZXBsYWNlIHRoZSBsZXNzIGRvbWluYW50OyB0aGUgbmV1dHJhbC13aXRoLWhhYml0YXQtc2VsZWN0aW9uIG1vZGVsLCBpcyBhIG5ldXRyYWwgbW9kZWwgYnV0IHByb3BhZ3VsZXMgc2VhcmNoIGFuIGVtcHR5IHBhdGNoIHNvIHRoZWlyIHN1cnZpdmFsIGlzIGVuc3VyZWQuIFNpbXVsYXRpb25zIHdlcmUgcGVyZm9ybWVkIHVzaW5nIGEgZml4ZWQgZ3Jvd3RoIHJhdGUgKDIpLCBtaWdyYXRpb24gYW5kIHJlcGxhY2VtZW50IHJhdGUgb2YgMC4wMDAxIGFuZCAwLjMgcmVzcGVjdGl2ZWx5LiBGb2xsb3dpbmcgMjAwIHRpbWUgc3RlcHMgb2YgdGhlIG1vZGVsLCA2MCUgb2YgdGhlIGhhYml0YXQgd2FzIGRlc3Ryb3llZCwgcmVuZGVyaW5nIGl0IHVuYXZhaWxhYmxlIGZvciB0aGUgc3BlY2llcy4gVGhlIGRlc3RydWN0aW9uIG9mIGhhYml0YXQgcmVzdWx0ZWQgaW4gdGhlIGZvcm1hdGlvbiBvZiByZWd1bGFyIHBhdHRlcm5zLCB3aGVyZSBhbGwgcmVtYWluaW5nIHBhdGNoZXMgZXhoaWJpdGVkIGVxdWFsIHNpemVzLl0oRmlndXJlcy9BY3Jvc3NCZWhhdl9TaGFubm9uX0Rpc3BlcnNhbF9MYW1iZGEyX3JlZ3VsYXIucG5nKQoKQ29tcGFyaW5nIHRoZSB0aHJlZSB2ZXJzaW9ucyBvZiB0aGUgbW9kZWwgYXQgJFxsYW1iZGEgPTIkLCBmb3IgaGlnaGVyIGRpc3BlcnNhbCB0aGUgbmV1dHJhbCBtb2RlbCB0ZW5kcyB0byBoYXZlIGhpZ2hlciByaWNobmVzcyBhbmQgU2hhbm5vbiBkaXZlcnNpdHkgYXQgaGlnaGVyIHBhdGNoIHNpemVzLCBmb2xsb3dlZCBieSB0aGUgaGllcmFyY2hpY2FsIG1vZGVsIGFuZCB0aGUgbmV1dHJhbC13aXRoLWhhYml0YXQtc2VsZWN0aW9uIG1vZGVsIChGaWd1cmVzIDMgJiA0KS4gQXQgdGhlIGxvd2VzdCBwYXRjaCBzaXplLCBvbmx5IGluIHRoZSBuZXV0cmFsLXdpdGgtaGFiaXRhdC1zZWxlY3Rpb24gaGF2ZSBwb3B1bGF0aW9ucyB0aGF0IGNhbiBzdXJ2aXZlLCBiZWNhdXNlIGluIHRoZSBvdGhlciBtb2RlbCB2ZXJzaW9ucyB0aGUgaW5kaXZpZHVhbHMgb2JzZXJ2ZWQgYXJlIG1pZ3JhbnRzIHRoYXQgY2Fubm90IGVzdGFibGlzaCBsb2NhbCBwb3B1bGF0aW9ucyBhbmQgYmVjb21lIGV4dGluY3QgKFNlZSBGaWd1cmVzIFM1IC0gUzE1KS4gVGh1cyBhbiBpbnRlcm1lZGlhdGUgcGF0Y2ggc2l6ZSB3aXRoIGEgbWF4aW11bSBzcGVjaWVzIHJpY2huZXNzIGlzIG5vdCBvYnNlcnZlZCBmb3IgdGhpcyBtb2RlbC4gSXMgYWxzbyBjbGVhcmx5IG9ic2VydmVkIHRoYXQgZm9yIHRoZSBoaWVyYXJjaGljYWwgbW9kZWwsIHRoZXJlIGlzIGEgc3Ryb25nIGRvbWluYW5jZSBvZiB0aGUgbW9yZSBjb21wZXRpdGl2ZSBzcGVjaWVzIHdoZXJlIFNoYW5ub24gRGl2ZXJzaXR5IGlzIHZlcnkgbG93IGZvciBhIGhpZ2hlciBkaXNwZXJzYWwgcmF0ZSAoRmlndXJlIDQgJiBTMjMpLgoKRXhhbXBsZXMgb2YgdGhlIHNwYXRpYWwgcGF0dGVybnMgb2Ygc3BlY2llcyBhbmQgaGFiaXRhdCBkaXN0cmlidXRpb25zIGFyZSBpbGx1c3RyYXRlZCBpbiBGaWd1cmVzIDUgYW5kIFM5LVMzMi4gU2ltdWxhdGlvbnMgd2l0aCB0aGUgbmV1dHJhbCBtb2RlbCBkZXBpY3QgdGhlIHNwZWNpZXMnIHNwYXRpYWwgZGlzdHJpYnV0aW9uIGJlZm9yZSBmcmFnbWVudGF0aW9uIChGaWd1cmUgNSBBICYgQikgYW5kIGFmdGVyIGZyYWdtZW50YXRpb24gKEZpZ3VyZSA1IEMgdG8gRiksIHdpdGggaGFiaXRhdCBkZXN0cnVjdGlvbiByZXByZXNlbnRlZCBpbiBwdXJwbGUgYXJlYXMuIEltbWVkaWF0ZWx5IGFmdGVyIGZyYWdtZW50YXRpb24sIHRoZSBzcGVjaWVzJyBzcGF0aWFsIGRpc3RyaWJ1dGlvbnMgY2xvc2VseSByZXNlbWJsZSB0aG9zZSBiZWZvcmUgaGFiaXRhdCBkZXN0cnVjdGlvbiwgYnV0IHRoZW4gdGhlIHBhdGNoIGNvbXBvc2l0aW9ucyBkaXZlcmdlLiBUaGUgZGl2ZXJnZW5jZSBpbiBwYXRjaCBzcGVjaWVzIGNvbXBvc2l0aW9uIGlzIG1vcmUgcHJvbm91bmNlZCBpbiB0aGUgaGllcmFyY2hpY2FsIG1vZGVsLCB3aGVyZSBzbWFsbCBwYXRjaGVzIHRlbmQgdG8gYmUgZG9taW5hdGVkIGJ5IG9uZSBzcGVjaWVzIChGaWd1cmVzIFMxNyAtIFMyNCkuIFRoZSBlZmZlY3Qgb2YgdGhlIG1pbmltdW0gcGF0Y2ggc2l6ZSBmb3Igc3Vydml2YWwgaXMgYWxzbyBvYnNlcnZlZCAoRmlndXJlIDUgRSkuCgohW0V4YW1wbGVzIG9mIHNwZWNpZXMgc3BhdGlhbCBwYXR0ZXJucyBiZWZvcmUgYW5kIGFmdGVyIGZyYWdtZW50YXRpb24gZm9yIHRoZSBuZXV0cmFsIG1vZGVsIGFyZSBpbGx1c3RyYXRlZC4gRGlmZmVyZW50IHNoYWRlcyBmcm9tIGRhcmsgZ3JlZW4gdG8gd2hpdGUgcmVwcmVzZW50IGRpc3RpbmN0IHNwZWNpZXMsIHdpdGggdGhlIGRlc3Ryb3llZCBoYWJpdGF0IGRlcGljdGVkIGluIHB1cnBsZS4gU2ltdWxhdGlvbnMgd2VyZSBjb25kdWN0ZWQgd2l0aCBhIGZpeGVkIGdyb3d0aCByYXRlICgkXGxhbWJkYT0yJCksIGEgbWlncmF0aW9uIHJhdGUgb2YgMC4wMDAxLCBhbmQgYSBkaXNwZXJzYWwgZGlzdGFuY2Ugb2YgMS41LiBBLiAmIEIuIHNob3djYXNlIHNwYXRpYWwgcGF0dGVybnMgYmVmb3JlIGZyYWdtZW50YXRpb24uIEMuICYgRC4gZGVwaWN0IHNwYXRpYWwgcGF0dGVybnMgYWZ0ZXIgZnJhZ21lbnRhdGlvbiwgd2hlcmUgNjAlIG9mIHRoZSBoYWJpdGF0IHdhcyBkZXN0cm95ZWQsIHdpdGggcGF0Y2ggc2l6ZXMgb2YgMyAoQykgYW5kIDI5IChEKS4gSW4gdGhlc2UgY2FzZXMsIHRoZSBzaWduaWZpY2FuY2Ugb2YgdGhlIHNwZWNpZXMnIHNwYXRpYWwgZGlzdHJpYnV0aW9uIGJlZm9yZSBmcmFnbWVudGF0aW9uIGJlY29tZXMgZXZpZGVudC4gRS4gJiBGLiBkaXNwbGF5IHNwYXRpYWwgcGF0dGVybnMgYWZ0ZXIgNjAwIHRpbWUgc3RlcHMsIGlsbHVzdHJhdGluZyB0aGUgZXh0aW5jdGlvbiBvZiBwb3B1bGF0aW9ucyBhdCBzbWFsbGVyIHBhdGNoIHNpemVzIChFKS5dKEZpZ3VyZXMvTW9kZWxTcGF0aWFsUGF0dGVybkNvbXBhcmlzb24ucG5nKQoKIyMgRGlzY3Vzc2lvbgoKT3VyIHJlc2VhcmNoIGNvbnRyaWJ1dGVzIHRvIHRoZSBvbmdvaW5nIFNMT1NTIGRlYmF0ZSBpbiBjb25zZXJ2YXRpb24gYmlvbG9neSwgb2ZmZXJpbmcgbmV3IGluc2lnaHRzIGJhc2VkIG9uIG91ciBtb2RlbCBmaW5kaW5ncy4gQ29uc2lzdGVudCB3aXRoIHByZXZpb3VzIHN0dWRpZXMsIHRoZSByZXN1bHRzIGZyb20gb3VyIHNpbXVsYXRpb25zIHByaW1hcmlseSBzdXBwb3J0IHRoZSBTUyA+IFNMIHBhdHRlcm4gZm9yIHNwZWNpZXMgcmV0ZW50aW9uLCBhcyBvYnNlcnZlZCBhY3Jvc3MgdmFyaW91cyBtb2RlbCBzY2VuYXJpb3MgW0BGYWhyaWcyMDIwXS4gVGhpcyB0cmVuZCB1bmRlcmxpbmVzIHRoZSBncmVhdGVyIGVmZmljYWN5IG9mIG11bHRpcGxlIHNtYWxsZXIgaGFiaXRhdHMgaW4gcHJlc2VydmluZyBzcGVjaWVzIGRpdmVyc2l0eSBjb21wYXJlZCB0byBhIHNpbmdsZSBsYXJnZSBoYWJpdGF0IHVuZGVyIGVxdWFsIGNvbmRpdGlvbnMgb2YgaGFiaXRhdCBsb3NzLiBBIGNyaXRpY2FsIGZhY3RvciBpbiB0aGlzIGR5bmFtaWMgaXMgdGhlIGJhbGFuY2UgYmV0d2VlbiByZXByb2R1Y3Rpb24gYW5kIGV4dGluY3Rpb24gcmF0ZXMgKCRcbGFtYmRhJCBwYXJhbWV0ZXIpIGFuZCBkaXNwZXJzYWwgcmVsYXRpdmUgdG8gdGhlIHNpemUgb2YgdGhlIGhhYml0YXQgcGF0Y2hlcywgaW5mbHVlbmNpbmcgdGhlaXIgcm9sZSBhcyBzb3VyY2VzIG9mIHByb3BhZ3VsZXMuIE5vdGFibHksIHRoZSBTTCA+IFNTIHNjZW5hcmlvIGVtZXJnZXMgb25seSB3aGVuIGRpc3BlcnNhbCBsaW1pdGF0aW9ucyBwcmV2ZW50IHBhdGNoIGNvbm5lY3Rpdml0eSwgYW5kIHBhdGNoIHNpemVzIGFyZSBhYm92ZSBhIGNlcnRhaW4gdGhyZXNob2xkIHRvIHByZXZlbnQgbG9jYWwgZXh0aW5jdGlvbnMsIGFsaWduaW5nIHdpdGggUnliaWNraSdzIFstQFJ5Ymlja2kyMDIwXSBmaW5kaW5ncy4KCkluIG5ldXRyYWwgbW9kZWxzLCB3aGVyZSBzcGVjaWVzIGFyZSBjb25zaWRlcmVkIGVxdWl2YWxlbnQsIG9uZSBzcGVjaWVzLCBieSBjaGFuY2UsIHRlbmRzIHRvIGRvbWluYXRlIGEgcGF0Y2ggKEh1YmJlbGwsIDIwMDEpLiBDb25zZXF1ZW50bHksIGluIGZyYWdtZW50ZWQgbGFuZHNjYXBlcywgb25jZSBhIHNwZWNpZXMgaW5jcmVhc2VzIGl0cyBkZW5zaXR5LCB0aGUgbGlrZWxpaG9vZCBvZiBhbm90aGVyIHNwZWNpZXMgcmVwbGFjaW5nIGl0IGlzIGxvdy4gV2l0aCBtb3JlIHBhdGNoZXMsIHRoZSBwcm9iYWJpbGl0eSBvZiBoYXZpbmcgYSBncmVhdGVyIG51bWJlciBvZiBzcGVjaWVzIGlzIGhlaWdodGVuZWQuIFRoaXMgZWZmZWN0IGlzIGZ1cnRoZXIgYW1wbGlmaWVkIHdoZW4gaW5kaXZpZHVhbHMgY2FuIGFjdGl2ZWx5IHNlbGVjdCB0aGVpciBoYWJpdGF0LCBsZWFkaW5nIHRvIGluY3JlYXNlZCBzdXJ2aXZhbCBvZiBwcm9wYWd1bGVzLiBDb25zZXF1ZW50bHksIGZyYWdtZW50YXRpb24gZXhoaWJpdHMgYSBwb3NpdGl2ZSBpbmZsdWVuY2Ugb24gdGhlIG51bWJlciBvZiBzcGVjaWVzIGluIHN1Y2ggc2NlbmFyaW9zLgoKRm9yIGNvbXBldGl0aXZlIGNvbW11bml0aWVzLCB0aGVyZSBpcyBhIGhpZ2hlciBwcm9iYWJpbGl0eSB0aGF0IGRpZmZlcmVudCBzcGVjaWVzIGRvbWluYXRlIGRpZmZlcmVudCBzbWFsbGVyIHBhdGNoZXMsIGNvbXBhcmVkIHdpdGggYSBiaWdnZXIgcGF0Y2guIFRodXMsIGFnYWluIGZyYWdtZW50YXRpb24gaGFzIGEgcG9zaXRpdmUgZWZmZWN0IG9uIHRoZSBudW1iZXIgb2Ygc3BlY2llcywgdGhpcyBlZmZlY3QgaXMgY2FsbGVkIHN0b2NoYXN0aWMgZGl2ZXJnZW5jZSBbQFJpdmEyMDIzXS4gSW4gc21hbGxlciBwYXRjaGVzIHRoZXJlIGlzIGFuIGluY3JlYXNlIGluIGV4dGluY3Rpb24gcmlzayBiZWNhdXNlIHRoZXkgc3VwcG9ydCBzbWFsbGVyIHBvcHVsYXRpb25zIFtATGF1cmFuY2UyMDAyO0BTaGFmZXIxOTk1XSwgaG93ZXZlciBhcyBwYXRjaGVzIGJlY29tZSBzbWFsbGVyIHRoZXkgYWxzbyBiZWNvbWUgbW9yZSBudW1lcm91cywgcmVkdWNpbmcgdGhlIHByb2JhYmlsaXR5IG9mIGV4dGluY3Rpb24gb3ZlciB0aGUgZW50aXJlIHNldCBvZiBwYXRjaGVzIGR1ZSB0byBzcHJlYWRpbmcgdGhlIHJpc2sgZWZmZWN0IFtAQ3Jvd2xleTE5NzddLiBUaGUgY29tYmluYXRpb24gb2YgdGhlc2UgdHdvIGVmZmVjdHMsIHRoZSBzdG9jaGFzdGljIGRpdmVyZ2VuY2UgYW5kIHRoZSByaXNrIGVmZmVjdCwgZXhwbGFpbiB0aGUgaGlnaGVzdCBudW1iZXIgb2Ygc3BlY2llcyB3aXRoIHBhdGNoIHNpemUgb3ZlciB0aGUgdGhyZXNob2xkIG9mIHNwZWNpZXMgc3Vydml2YWwuIAoKVGhpcyBwb3NpdGl2ZSBlZmZlY3QgaXMgY291bnRlcmFjdGVkIGJ5IGRpc3BlcnNhbCwgaGlnaCBkaXNwZXJzYWwgcmF0ZXMgdGVuZCB0byBhIGhvbW9nZW5pemF0aW9uIG9mIHNwZWNpZXMgZGlzdHJpYnV0aW9ucywgc28gZnJhZ21lbnRlZCBsYW5kc2NhcGVzIHRlbmQgdG8gYmUgbW9yZSBsaWtlIG5vdCBmcmFnbWVudGVkIG9uZXMgcmVkdWNpbmcgb3ZlcmFsbCBzcGVjaWVzIHJpY2huZXNzLiBUaGlzIHBhdHRlcm4gd2FzIHBhcnRpY3VsYXJseSBwcm9ub3VuY2VkIGZvciBzcGVjaWVzIGNvbWJpbmluZyBoaWdoIGRpc3BlcnNhbCBjYXBhYmlsaXRpZXMgd2l0aCBjb21wZXRpdGl2ZSBzdHJlbmd0aHMsIGluZGljYXRpbmcgYSBjb21wbGV4IGludGVycGxheSBiZXR3ZWVuIGRpc3BlcnNhbCwgY29tcGV0aXRpdmUgaW50ZXJhY3Rpb25zLCBhbmQgc3BlY2llcyBkaXZlcnNpdHkgW0BGYWhyaWcyMDIwXS4gCgpFZGdlIGVmZmVjdHMgYXJlIHByZXNlbnQgaW4gdGhlIG5ldXRyYWwgYW5kIGhpZXJhcmNoaWNhbCBtb2RlbHMsIGJ1dCBub3QgaW4gdGhlIG5ldXRyYWwtd2l0aC1oYWJpdGF0LXNlbGVjdGlvbiBtb2RlbC4gSW4gdGhlIGZpcnN0IHR3byBtb2RlbHMsIHRoZSBlZGdlIGVmZmVjdCBpcyBiZWNhdXNlIGluZGl2aWR1YWxzIGluIHRoZSBwYXRjaCdzIGJvcmRlciBoYXZlIGZld2VyIG5laWdoYm9ycyBhbmQgdGhlIHByb2JhYmlsaXR5IG9mIGV4dGluY3Rpb24gaXMgaGlnaGVyLiAgSW4gdGhlIG5ldXRyYWwtd2l0aC1oYWJpdGF0LXNlbGVjdGlvbiBtb2RlbCwgdGhlIGVkZ2UgZWZmZWN0IGlzIG5vdCBwcmVzZW50IGJlY2F1c2UgdGhlIGluZGl2aWR1YWxzIHNlYXJjaCBmb3IgZW1wdHkgcGF0Y2hlcywgc28gdGhlIGluZGl2aWR1YWxzIG9uIHRoZSBib3JkZXIgb2YgdGhlIHBhdGNoIGhhdmUgdGhlIHNhbWUgcHJvYmFiaWxpdHkgb2YgZXh0aW5jdGlvbiBhcyB0aGUgaW5kaXZpZHVhbHMgaW4gdGhlIGludGVyaW9yIG9mIHRoZSBwYXRjaC4gVGh1cyB3aGVuIHBhdGNoZXMgYXJlIHNtYWxsZXIgdGhlIGVkZ2UgcHJvcG9ydGlvbiBpcyBoaWdoZXIgYW5kIHRoZSBlZGdlIGVmZmVjdCBpcyBtb3JlIGltcG9ydGFudCwgYnV0IHRoaXMgcGxheXMgYSBtb3JlIGltcG9ydGFudCByb2xlIGluIHRoZSBtaW5pbWFsIHBhdGNoIHNpemUgZm9yIHRoZSBzdXJ2aXZhbCBvZiBzcGVjaWVzIHRoYW4gZm9yIHRoZSBzcGVjaWVzIHJpY2huZXNzLgoKVGhlIHNwYXRpYWwgYXJyYW5nZW1lbnQgb2YgaGFiaXRhdCBwYXRjaGVzLCBjb250cmFyeSB0byBzb21lIGV4cGVjdGF0aW9ucywgZGlkIG5vdCBwcm9kdWNlIGRpZmZlcmVudCBzcGVjaWVzIHJpY2huZXNzIHBhdHRlcm5zIHJlZ2FyZGluZyBoYWJpdGF0IHBhdGNoIHNpemUuIFRoZSBleGNlcHRpb25zIGFyZSBzdHJlc3NlZCBjb21tdW5pdGllcy0tLXJlcHJlc2VudGVkIGluIG91ciBtb2RlbHMgd2l0aCBsb3dlc3QgJFxsYW1iZGEkLS0tIHdpdGggbG93IGRpc3BlcnNhbCBtYXkgaGF2ZSBhIGNvbnRpbnVvdXMgaW5jcmVtZW50IG9mIHJpY2huZXNzIHdpdGggcGF0Y2ggc2l6ZSwgb2JzZXJ2ZWQgb25seSBpbiByYW5kb20gYmxvY2sgZGVncmFkYXRpb24gcGF0dGVybnMuIFRoaXMgY291bGQgYmUgcmVsYXRlZCB0byB0aGUgb3B0aW1hbCBwYXRjaCBzaXplIGZvciByYW5kb20gYmxvY2sgaGFiaXRhdCBsb3NzIHBhdHRlcm5zLCB3aGljaCB0ZW5kcyB0byBiZSBoaWdoZXIgdGhhbiBmb3IgcmVndWxhciBwYXR0ZXJucywgc28gd2UgY291bGQgaHlwb3RoZXNpemUgdGhhdCB0aGUgb3B0aW1hbCB3YXMgb3V0c2lkZSB0aGUgc2ltdWxhdGVkIHJhbmdlIGZvciB0aGVzZSBzdHJlc3NlZCBjb21tdW5pdGllcy4gVGhlIGFnZ3JlZ2F0aW9uIG9mIHBhdGNoZXMgaW4gdGhlIHJhbmRvbSBibG9jayBwYXR0ZXJuIChpbXBsaWVzIGFnZ3JlZ2F0aW9uIG9mIHRoZSBkZWdyYWRlZCBoYWJpdGF0KSBjb3VsZCBiZSBwb3NpdGl2ZSBpZiBpbmRpdmlkdWFsIGhhYml0YXQgcGF0Y2hlcyBhcmUgdmVyeSBzbWFsbCBiZWNhdXNlIGl0IGFsbG93cyBzb21lIHBhdGNoZXMgdG8gc3VycGFzcyB0aGUgbWluaW11bSBzaXplIHJlcXVpcmVkIGZvciBzdXJ2aXZhbC4gRm9yIGJpZ2dlciBwYXRjaCBzaXplcyBpdCBjb3VsZCBiZSBkZXRyaW1lbnRhbCBiZWNhdXNlIHRoZSBhZ2dyZWdhdGlvbiBwcm9kdWNlcyBldmVuIGJpZ2dlciBwYXRjaCBzaXplcyB0aGF0IGRlY3JlYXNlIHNwZWNpZXMgcmljaG5lc3MuIEEgc2ltaWxhciBlZmZlY3Qgd2FzIG9ic2VydmVkIG9uIGV4cGVyaW1lbnRhbCBsYW5kc2NhcGVzIFtARmxldGNoZXIyMDIzXSwgYWdncmVnYXRlZCBwYXR0ZXJucyBvZiBoYWJpdGF0IGxvc3MgYXJlIGRldHJpbWVudGFsIHRvIHBhdGNoIG9jY3VwYW5jeSBhbmQgZXZlbnR1YWxseSBjb3VsZCBwcm9kdWNlIHRoZSBzYW1lIGVmZmVjdHMgb2JzZXJ2ZWQgaW4gb3VyIG1vZGVscyBhYm91dCByaWNobmVzcy4gCgpOYXR1cmFsbHksIHRoZXJlIGFyZSBsaW1pdGF0aW9ucyB0byBvdXIgbW9kZWxpbmcgd29yay4gRmlyc3RseSwgaXQgaXMgaW1wb3J0YW50IHRvIG5vdGUgdGhhdCBtb3JlIHJlc2VhcmNoIGlzIG5lZWRlZCB0byBhcHBseSBvdXIgdG8gZGV0ZXJtaW5lIHRoZSBlZmZlY3Qgb2YgZnJhZ21lbnRhdGlvbiBpbiByZWFsLXdvcmxkIGNvbW11bml0aWVzLiBXZSBhc3N1bWUgdGhhdCBhbGwgc3BlY2llcyBoYXZlIHRoZSBzYW1lIHBhcmFtZXRlcnMsIHRodXMgaHlwb3RoZXRpY2FsbHkgZGV0ZXJtaW5pbmcgdGhlc2UgcGFyYW1ldGVycyBmb3IgYWxsIHRoZSBzcGVjaWVzLCBhbmQgdXNpbmcgdGhlIG1lYW4gdG8gZGV0ZXJtaW5lIHRoZSByZXNwb25zZXMgdG8gZnJhZ21lbnRhdGlvbiB3b3VsZCByZW5kZXIgYW4gYXBwcm94aW1hdGUgdmFsdWUgZm9yIHRoZSBlZmZlY3RzIGFuZCB0aHJlc2hvbGRzLiBBbHNvLCBhbiBpbXByb3ZlZCB2ZXJzaW9uIG9mIHRoZSBtb2RlbCB3aXRoIGRpZmZlcmVudCB2YWx1ZXMgb2YgdGhlIHBhcmFtZXRlcnMgZm9yIGVhY2ggc3BlY2llcyBjb3VsZCBiZSBkZXZlbG9wZWQgYW5kIGNvbXBhcmVkIHdpdGggdGhlIG5ldXRyYWwgbW9kZWwuIFRoZSBlZmZlY3RzIG9mIGZyYWdtZW50YXRpb24gY291bGQgYmUgaW5mbHVlbmNlZCBieSBtYW55IG90aGVyIGVjb2xvZ2ljYWwvYmVoYXZpb3VyYWwgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBzcGVjaWVzIG5vdCBjb25zaWRlcmVkIGluIHRoZSBtb2RlbCwgaW5jbHVkaW5nIGVudmlyb25tZW50YWwgaGV0ZXJvZ2VuZWl0eSwgbWF0cml4IHBlcm1lYWJpbGl0eSwgYW5kIGluZGl2aWR1YWzigJlzIGNvc3Qgb2YgZGlzcGVyc2FsLCBhbW9uZyBvdGhlcnMuIEZ1cnRoZXIsIHRoZSBzaXplIG9mIHRoZSBmb2NhbCBsYW5kc2NhcGUgY29tcGFyZWQgdG8gZGlzcGVyc2FsIGRpc3RhbmNlcywgd2hpY2ggZGV0ZXJtaW5lcyB0aGUgc2NhbGUgb2YgdGhlIGR5bmFtaWNzLCBjb3VsZCBpbmZsdWVuY2UgcXVhbnRpdGF0aXZlIHJlc3VsdHMgW0BSeWJpY2tpMjAyMF0uIEFkZGl0aW9uYWxseSwgdGhlIGFwcGxpY2F0aW9uIG9mIG1lYW4gcGFyYW1ldGVyIHZhbHVlcyBpbiByZWxhdGl2ZWx5IHNpbXBsZSBtdWx0aXNwZWNpZXMgbW9kZWxzIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBlbXBsb3llZCBhbmQgdGVzdGVkIGZvciBwcmVkaWN0aW5nIHNwZWNpZXMgYmlvbWFzcywgYXMgZGVtb25zdHJhdGVkIGJ5IEBGb3J0MjAxOC4gCgpJbiBwcmV2aW91cyBzaW11bGF0aW9uIHN0dWRpZXMsIHRoZSBpbXBvcnRhbmNlIG9mIGZyYWdtZW50YXRpb24gd2FzIGRlbW9uc3RyYXRlZCB0byBiZSBwcm9ub3VuY2VkIHdoZW4gdGhlIGhhYml0YXQgYW1vdW50IGlzIGxvdywgYXBwcm94aW1hdGVseSBhcm91bmQgMTAlIFtASGFuc2tpMjAxNTsgQFJ5Ymlja2kyMDEzXS4gSG93ZXZlciwgZXhwZXJpbWVudGFsIHN0dWRpZXMgaGF2ZSBvYnNlcnZlZCB0aGF0IHdpdGggaGFiaXRhdCBsZXZlbHMgYXJvdW5kIDEwLTIwJSwgdGhlIGltcGFjdCBvZiBmcmFnbWVudGF0aW9uIGNhbiBiZSBwb3NpdGl2ZSBvciBzaG93IGFuIGludGVybWVkaWF0ZSBtYXhpbXVtIFtATG9rZTIwMTk7IEBXaXRoMjAxNl0uIFdoZW4gaGFiaXRhdCBhbW91bnRzIGFyZSBsb3dlciAoZS5nLiwgNyUpLCB0aGUgYXJyYW5nZW1lbnQgb2YgcGF0Y2hlcyBhcHBlYXJzIHRvIGhhdmUgbm8gc2lnbmlmaWNhbnQgZWZmZWN0LiBJbnRlcmVzdGluZ2x5LCBvdXIgc3R1ZHkgcmVwbGljYXRlZCBzaW1pbGFyIHBhdHRlcm5zIGV2ZW4gd2l0aCBhIDQwJSBoYWJpdGF0IGFtb3VudC4gTW9yZW92ZXIsIG90aGVyIHN0dWRpZXMgZW1wbG95aW5nIGNvbXBhcmFibGUgaGFiaXRhdCBhbW91bnRzICgzMiUpIGFsc28gcmVwb3J0ZWQgaGlnaGVyIHNwZWNpZXMgcmljaG5lc3Mgd2l0aCBpbmNyZWFzZWQgZnJhZ21lbnRhdGlvbiBbQFJ5Ymlja2kyMDIwXS4KCk9uZSBub3ZlbCBhc3BlY3Qgb2Ygb3VyIG1vZGVsIGlzIHRoYXQgaXQgY29uc2lkZXJzIGNvbW11bml0aWVzIHRoYXQgYXJlIGFzc2VtYmxlZCBmcm9tIGEgbWV0YWNvbW11bml0eSBpbiB3aGljaCBpbmRpdmlkdWFscyBtaWdyYXRlIHRvIGFuIGVtcHR5IGhhYml0YXQuIEFmdGVyIHRoZSBudW1iZXIgb2Ygc3BlY2llcyBpcyBzdGFiaWxpemVkIHRoZSBoYWJpdGF0IGlzIGZyYWdtZW50ZWQuIFRoaXMgc2NlbmFyaW8gaXMgZGVlbWVkIG1vcmUgcmVhbGlzdGljIHRoYW4gaGF2aW5nIGFsbCBzcGVjaWVzIGluaXRpYWxseSBwcmVzZW50IHdpdGggcmFuZG9tIHBhdHRlcm5zIGluIGFuIGFscmVhZHkgZnJhZ21lbnRlZCBoYWJpdGF0ICBbQFJ5Ymlja2kyMDIwXS4gVGhpcyBjb3VsZCBiZSBtb3JlIGltcG9ydGFudCB0aGUgbW9yZSBoZXRlcm9nZW5lb3VzIHdhcyBzcGVjaWVzIHNwYXRpYWwgZGlzdHJpYnV0aW9uIHBhdHRlcm4gYmVmb3JlIGZyYWdtZW50YXRpb24sIGFzIHRoZSBjdWJlIGh5cG90aGVzaXMgc3RhdGVzLgoKSW4gdGVybXMgb2YgdGhlIGN1YmUgaHlwb3RoZXNpcywgbG93IGJldHdlZW4tcGF0Y2ggbW92ZW1lbnQsIG1pbmltYWwgaW1wYWN0IG9mIHNwcmVhZGluZy1vZi1yaXNrIG9uIHBvcHVsYXRpb24gZHluYW1pY3MsIGFuZCBsb3cgc3BlY2llcyBzcGF0aWFsIGNsdW1waW5nIGFyZSBuZWVkZWQgZm9yIFNMID4gU1MuIEluIG91ciBtb2RlbCBkaXNwZXJzYWwgZGlzdGFuY2UgaW5jcmVhc2VzIGJldHdlZW4gcGF0Y2ggbW92ZW1lbnRzLCBidXQgZm9yIGhpZ2hlciBkaXNwZXJzYWwgZGlzdGFuY2VzIHRoZSBzaXplcyBvZiB0aGUgcGF0Y2hlcyBhcmUgbGVzcyBpbXBvcnRhbnQgYW5kIHRoZSByZWxhdGlvbnNoaXAgdGVuZHMgdG8gYmUgU1MgPSBTTC4gU3ByZWFkaW5nLW9mLXJpc2sgaXMgaW5mbHVlbmNlZCBieSAkXGxhbWJkYSQsIHdoaWNoIHJlcHJlc2VudHMgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSBncm93dGggYW5kIGRlYXRoIHJhdGVzLiBGb3Igc21hbGxlciAkXGxhbWJkYSQsIHNwcmVhZGluZy1vZi1yaXNrIGJlY29tZXMgbW9yZSBzaWduaWZpY2FudCBiZWNhdXNlIHRoZSBwcm9iYWJpbGl0eSBvZiBsb2NhbCBleHRpbmN0aW9uIGlzIGhpZ2hlci4gQSB2ZXJ5IGxvdyBkaXNwZXJzYWwgZGlzdGFuY2UgY29tYmluZWQgd2l0aCBsb3cgJFxsYW1iZGEkIGZhdm9ycyBTTCA+IFNTIHVwIHRvIGEgdGhyZXNob2xkIGluIHBhdGNoIHNpemUsIGJleW9uZCB3aGljaCBTTCA9IFNTLiBUaGUgc3BhdGlhbCBjbHVtcGluZyBvZiBzcGVjaWVzIGlzIGluZmx1ZW5jZWQgYnkgdGhlIGRpc3BlcnNhbCBkaXN0YW5jZTsgYSBoaWdoZXIgZGlzcGVyc2FsIGRpc3RhbmNlIHByb2R1Y2VzIGxlc3MgY2x1bXBpbmVzcy4gSG93ZXZlciwgdGhpcyBpcyBjb25mb3VuZGVkIHdpdGggcGF0Y2ggbW92ZW1lbnQsIG1ha2luZyBpdCBjaGFsbGVuZ2luZyB0byBkaXNlbnRhbmdsZSB0aGUgZWZmZWN0LiBUaGVyZWZvcmUsIHRoZSByZXN1bHRzIG9mIG91ciBtb2RlbCBhcmUgZ2VuZXJhbGx5IGNvbXBhdGlibGUgd2l0aCB0aGUgY3ViZSBoeXBvdGhlc2lzLgoKT3VyIGZpbmRpbmdzIHN1cHBvcnQgRmFocmlnJ3MgWy1ARmFocmlnMjAyMV0gY29uY2x1c2lvbiB0aGF0IGNvbmRpdGlvbnMgZmF2b3JpbmcgU0wgPiBTUyBhcmUgbGltaXRlZCBhbmQgaW5mcmVxdWVudGx5IG9ic2VydmVkIGluIG5hdHVyZS4gVW5kZXIgY29uZGl0aW9ucyBvZiBhZGVxdWF0ZSBwYXRjaCBzaXplIGFuZCBkaXNwZXJzYWwgY2FwYWJpbGl0aWVzLCB0aGUgU1Mgc2NlbmFyaW8gdHlwaWNhbGx5IHJldGFpbnMgbW9yZSBzcGVjaWVzLiBUaGlzIHVuZGVyc2NvcmVzIHRoZSBlY29sb2dpY2FsIHNpZ25pZmljYW5jZSBvZiBzbWFsbGVyIGhhYml0YXQgcGF0Y2hlcyBpbiBtYWludGFpbmluZyBiaW9kaXZlcnNpdHkgYW5kIGxhbmRzY2FwZSBjb25uZWN0aXZpdHkgW0BZYW4yMDIxOyBATWFubmluZzIwMDY7IEBTaGFmZXIxOTk1XS4gT3VyIHJlc3VsdHMgdGh1cyBjaGFsbGVuZ2UgdGhlIGNvbnZlbnRpb25hbCBwcmVmZXJlbmNlIGZvciBsYXJnZXIgcmVzZXJ2ZXMgaW4gY29uc2VydmF0aW9uIHBsYW5uaW5nIGFuZCBzdXBwb3J0IHRoZSBwYXJhZGlnbSBzaGlmdCBpbiBjb25zZXJ2YXRpb24gdG93YXJkcyBjb25zaWRlcmluZyBzZXRzIG9mIG1hbnkgc21hbGwgcGF0Y2hlcyBnZW5lcmFsbHkgaGF2aW5nIGhpZ2hlciBiaW9kaXZlcnNpdHkgdGhhbiBzZXRzIG9mIGZldyBsYXJnZSBwYXRjaGVzIFtAUml2YTIwMjNdLiBUaGUgbW9kZWwncyBwcmltYXJ5IG91dGNvbWVzIGNvdWxkIGJlIHZhbGlkYXRlZCB1c2luZyBlbXBpcmljYWwgZGF0YSBieSBhc3Nlc3NpbmcgdGhlIHByZWRpY3Rpb24gdGhhdCBzcGVjaWVzIHdpdGggZ3JlYXRlciBkaXNwZXJzYWwgY2FwYWJpbGl0aWVzIHdvdWxkIGV4aGliaXQgYSBsb3dlciBTUyBlZmZlY3QgY29tcGFyZWQgdG8gc3BlY2llcyB3aXRoIGxpbWl0ZWQgZGlzcGVyc2FsLgoKSW4gY29uY2x1c2lvbiwgd2UgYmVsaWV2ZSBvdXIgc3R1ZHkgYWRkcyB2YWx1YWJsZSBwZXJzcGVjdGl2ZXMgdG8gdGhlIFNMT1NTIGRlYmF0ZSwgaWxsdXN0cmF0aW5nIHRoZSBjb21wbGV4aXRpZXMgb2YgaGFiaXRhdCBmcmFnbWVudGF0aW9uIGFuZCBzcGVjaWVzIGNvbnNlcnZhdGlvbi4gV2hpbGUgb3VyIG1vZGVsIGhhcyBpbmhlcmVudCBsaW1pdGF0aW9ucywgaXQgcHJvdmlkZXMgYSB1c2VmdWwgZnJhbWV3b3JrIGZvciB1bmRlcnN0YW5kaW5nIGtleSBlY29sb2dpY2FsIHByb2Nlc3Nlcy4gRnV0dXJlIHJlc2VhcmNoIHNob3VsZCBhaW0gdG8gZXh0ZW5kIHRoZXNlIGZpbmRpbmdzIHRvIG1vcmUgZGl2ZXJzZSBlY29sb2dpY2FsIHNldHRpbmdzIGFuZCBpbmNvcnBvcmF0ZSBob3cgaGV0ZXJvZ2VuZWl0eSBiZXR3ZWVuIHNwZWNpZXMgaW5mbHVlbmNlIGJpb2RpdmVyc2l0eSBpbiBmcmFnbWVudGVkIGxhbmRzY2FwZXMuCgoKIyMgQWNrbm93bGVkZ21lbnRzCgojIyBSZWZlcmVuY2VzCgAAAAAAAAAA74UAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXl0AAAAAAABeXQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "Appendices.md",
			"settings":
			{
				"buffer_size": 13599,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					2,
					"left_delete",
					null,
					"AgAAAGsAAAAAAAAAawAAAAAAAAAeBAAAIVtSZWxhdGlvbnNoaXAgYmV0d2VlbiBudW1iZXIgb2Ygc3BlY2llcyBhbmQgaGFiaXRhdCBwYXRjaCBzaXplIGZvciB2YXJ5aW5nIGRpc3BlcnNhbCBkaXN0YW5jZXMgYW5kIGdyb3d0aCByYXRlIHBhcmFtZXRlcnMgIChhY3Jvc3MgcGFuZWxzKS4gU2ltdWxhdGlvbnMgd2VyZSBwZXJmb3JtZWQgdXNpbmcgYSBuZXV0cmFsIG1vZGVsIHdpdGggYSBjb25zdGFudCBtaWdyYXRpb24gcmF0ZSAoMC4wMDAxKS4gRm9sbG93aW5nIDIwMCB0aW1lIHN0ZXBzIG9mIHRoZSBtb2RlbCwgNjAlIG9mIHRoZSBoYWJpdGF0IHdhcyBkZXN0cm95ZWQsIHJlbmRlcmluZyBpdCB1bmF2YWlsYWJsZSBmb3IgdGhlIHNwZWNpZXMuIFRoZSBkZXN0cnVjdGlvbiBvZiBoYWJpdGF0IHJlc3VsdGVkIGluIHRoZSBmb3JtYXRpb24gb2YgcmVndWxhciBwYXR0ZXJucywgd2hlcmUgYWxsIHJlbWFpbmluZyBwYXRjaGVzIGV4aGliaXRlZCBlcXVhbCBzaXplcy4gXShGaWd1cmVzL1NwZWNpZXNfSGFiaXRhdF9EaXNwZXJzYWxfTGFtYmRhX3JlZ3VsYXIucG5nKQoKIVtSZWxhdGlvbnNoaXAgYmV0d2VlbiBTaGFubm9uIERpdmVyc2l0eSBhbmQgaGFiaXRhdCBwYXRjaCBzaXplIGZvciB2YXJ5aW5nIGRpc3BlcnNhbCBkaXN0YW5jZXMgYW5kIGdyb3d0aCByYXRlIHBhcmFtZXRlcnMgIChhY3Jvc3MgcGFuZWxzKS4gU2ltdWxhdGlvbnMgd2VyZSBwZXJmb3JtZWQgdXNpbmcgYSBuZXV0cmFsIG1vZGVsIHdpdGggYSBjb25zdGFudCBtaWdyYXRpb24gcmF0ZSAoMC4wMDAxKS4gRm9sbG93aW5nIDIwMCB0aW1lIHN0ZXBzIG9mIHRoZSBtb2RlbCwgNjAlIG9mIHRoZSBoYWJpdGF0IHdhcyBkZXN0cm95ZWQsIHJlbmRlcmluZyBpdCB1bmF2YWlsYWJsZSBmb3IgdGhlIHNwZWNpZXMuIFRoZSBkZXN0cnVjdGlvbiBvZiBoYWJpdGF0IHJlc3VsdGVkIGluIHRoZSBmb3JtYXRpb24gb2YgcmVndWxhciBwYXR0ZXJucywgd2hlcmUgYWxsIHJlbWFpbmluZyBwYXRjaGVzIGV4aGliaXRlZCBlcXVhbCBzaXplcy5dKEZpZ3VyZXMvU2hhbm5vbl9IYWJpdGF0X0Rpc3BlcnNhbF9MYW1iZGFfcmVndWxhci5wbmcpCmoAAAAAAAAAagAAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJBAAAAAAAAGsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAAD9FAAALS0tCm91dHB1dDoKICBwZGZfZG9jdW1lbnQ6IGRlZmF1bHQKICBodG1sX2RvY3VtZW50OiBkZWZhdWx0Ci0tLQojIEFwcGVuZGljZXMgLSBTdXBwbGVtZW50YXJ5IEluZm9ybWF0aW9uCgohW1JlbGF0aW9uc2hpcCBiZXR3ZWVuIG51bWJlciBvZiBzcGVjaWVzIGFuZCBtYXhpbXVtIHBhdGNoIHNpemUgZm9yIHZhcnlpbmcgZGlzcGVyc2FsIGRpc3RhbmNlcyBhbmQgZ3Jvd3RoIHJhdGUgcGFyYW1ldGVycyAgKGFjcm9zcyBwYW5lbHMpLiBTaW11bGF0aW9ucyB3ZXJlIHBlcmZvcm1lZCB1c2luZyBhIG5ldXRyYWwgbW9kZWwgd2l0aCBhIGNvbnN0YW50IG1pZ3JhdGlvbiByYXRlICgwLjAwMDEpLiBGb2xsb3dpbmcgMjAwIHRpbWUgc3RlcHMgb2YgdGhlIG1vZGVsLCA2MCUgb2YgdGhlIGhhYml0YXQgd2FzIGRlc3Ryb3llZCwgcmVuZGVyaW5nIGl0IHVuYXZhaWxhYmxlIGZvciB0aGUgc3BlY2llcy4gSGFiaXRhdCBibG9ja3Mgb2YgdGhlIHNhbWUgc2l6ZSAoaGFiaXRhdCBwYXRjaCBzaXplKSB3ZXJlIHJhbmRvbWx5IGRpc3RyaWJ1dGVkIG92ZXIgdGhlIHNpbXVsYXRpb24gZ3JpZC4gQXMgYSByZXN1bHQsIHNvbWUgcGF0Y2hlcyBvdmVybGFwcGVkLCBsZWFkaW5nIHRvIGEgZGlzdHJpYnV0aW9uIG9mIHBhdGNoIHNpemVzLiBUaGUgcmFuZ2Ugb2YgcGF0Y2ggc2l6ZXMgd2FzIGRldGVybWluZWQgYnkgdGhlIGhhYml0YXQgcGF0Y2ggc2l6ZSBwYXJhbWV0ZXIsIGRlZmluaW5nIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIHNpemVzIG9ic2VydmVkLl0oRmlndXJlcy9TcGVjaWVzX01heFBhdGNoX0Rpc3BlcnNhbF9MYW1iZGFfYmxvY2sucG5nKQoKIVtSZWxhdGlvbnNoaXAgYmV0d2VlbiBTaGFubm9uIERpdmVyc2l0eSBhbmQgbWF4aW11bSBwYXRjaCBzaXplIGZvciB2YXJ5aW5nIGRpc3BlcnNhbCBkaXN0YW5jZXMgYW5kIGdyb3d0aCByYXRlIHBhcmFtZXRlcnMgKGFjcm9zcyBwYW5lbHMpLiBTaW11bGF0aW9ucyB3ZXJlIHBlcmZvcm1lZCB1c2luZyBhIG5ldXRyYWwgbW9kZWwgd2l0aCBhIGNvbnN0YW50IG1pZ3JhdGlvbiByYXRlICgwLjAwMDEpLiBGb2xsb3dpbmcgMjAwIHRpbWUgc3RlcHMgb2YgdGhlIG1vZGVsLCA2MCUgb2YgdGhlIGhhYml0YXQgd2FzIGRlc3Ryb3llZCwgcmVuZGVyaW5nIGl0IHVuYXZhaWxhYmxlIGZvciB0aGUgc3BlY2llcy4gSGFiaXRhdCBibG9ja3Mgb2YgdGhlIHNhbWUgc2l6ZSAoaGFiaXRhdCBwYXRjaCBzaXplKSB3ZXJlIHJhbmRvbWx5IGRpc3RyaWJ1dGVkIG92ZXIgdGhlIHNpbXVsYXRpb24gZ3JpZC4gQXMgYSByZXN1bHQsIHNvbWUgcGF0Y2hlcyBvdmVybGFwcGVkLCBsZWFkaW5nIHRvIGEgZGlzdHJpYnV0aW9uIG9mIHBhdGNoIHNpemVzLiBUaGUgcmFuZ2Ugb2YgcGF0Y2ggc2l6ZXMgd2FzIGRldGVybWluZWQgYnkgdGhlIGhhYml0YXQgcGF0Y2ggc2l6ZSBwYXJhbWV0ZXIsIGRlZmluaW5nIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIHNpemVzIG9ic2VydmVkLl0oRmlndXJlcy9TaGFubm9uX01heFBhdGNoX0Rpc3BlcnNhbF9MYW1iZGFfYmxvY2sucG5nKQoKCiFbUmVsYXRpb25zaGlwIGJldHdlZW4gbnVtYmVyIG9mIHNwZWNpZXMgYW5kIGhhYml0YXQgcGF0Y2ggc2l6ZSBmb3IgdmFyeWluZyBkaXNwZXJzYWwgZGlzdGFuY2VzIGFuZCBncm93dGggcmF0ZSBwYXJhbWV0ZXJzICAoYWNyb3NzIHBhbmVscykuIFNpbXVsYXRpb25zIHdlcmUgcGVyZm9ybWVkIHVzaW5nIGEgY29tcGV0aXRpdmUgaGllcmFyY2hpY2FsIG1vZGVsIHdpdGggY29uc3RhbnQgbWlncmF0aW9uIGFuZCBhIHJlcGxhY2VtZW50IHJhdGUgb2YgMC4wMDAxIGFuZCAwLjMgcmVzcGVjdGl2ZWx5LiBGb2xsb3dpbmcgMjAwIHRpbWUgc3RlcHMgb2YgdGhlIG1vZGVsLCA2MCUgb2YgdGhlIGhhYml0YXQgd2FzIGRlc3Ryb3llZCwgcmVuZGVyaW5nIGl0IHVuYXZhaWxhYmxlIGZvciB0aGUgc3BlY2llcy4gVGhlIGRlc3RydWN0aW9uIG9mIGhhYml0YXQgcmVzdWx0ZWQgaW4gdGhlIGZvcm1hdGlvbiBvZiByZWd1bGFyIHBhdHRlcm5zLCB3aGVyZSBhbGwgcmVtYWluaW5nIHBhdGNoZXMgZXhoaWJpdGVkIGVxdWFsIHNpemVzLl0oRmlndXJlcy9IaWVyYXJjaGljYWxfU3BlY2llc19EaXNwZXJzYWxfTGFtYmRhX3JlZ3VsYXIucG5nKQoKIVtSZWxhdGlvbnNoaXAgYmV0d2VlbiBTaGFubm9uIERpdmVyc2l0eSBhbmQgaGFiaXRhdCBwYXRjaCBzaXplIGZvciB2YXJ5aW5nIGRpc3BlcnNhbCBkaXN0YW5jZXMgYW5kIGdyb3d0aCByYXRlIHBhcmFtZXRlcnMgIChhY3Jvc3MgcGFuZWxzKS4gU2ltdWxhdGlvbnMgd2VyZSBwZXJmb3JtZWQgdXNpbmcgYSBjb21wZXRpdGl2ZSBoaWVyYXJjaGljYWwgbW9kZWwgd2l0aCBjb25zdGFudCBtaWdyYXRpb24gYW5kIGEgcmVwbGFjZW1lbnQgcmF0ZSBvZiAwLjAwMDEgYW5kIDAuMyByZXNwZWN0aXZlbHkuIEZvbGxvd2luZyAyMDAgdGltZSBzdGVwcyBvZiB0aGUgbW9kZWwsIDYwJSBvZiB0aGUgaGFiaXRhdCB3YXMgZGVzdHJveWVkLCByZW5kZXJpbmcgaXQgdW5hdmFpbGFibGUgZm9yIHRoZSBzcGVjaWVzLiBUaGUgZGVzdHJ1Y3Rpb24gb2YgaGFiaXRhdCByZXN1bHRlZCBpbiB0aGUgZm9ybWF0aW9uIG9mIHJlZ3VsYXIgcGF0dGVybnMsIHdoZXJlIGFsbCByZW1haW5pbmcgcGF0Y2hlcyBleGhpYml0ZWQgZXF1YWwgc2l6ZXMuXShGaWd1cmVzL0hpZXJhcmNoaWNhbF9TaGFubm9uX0Rpc3BlcnNhbF9MYW1iZGFfcmVndWxhci5wbmcpCgohW1JlbGF0aW9uc2hpcCBiZXR3ZWVuIG51bWJlciBvZiBzcGVjaWVzIGFuZCBoYWJpdGF0IHBhdGNoIHNpemUgZm9yIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiB0aGUgbW9kZWwgKGFjcm9zcyBwYW5lbHMpIGFuZCB2YXJ5aW5nIGRpc3BlcnNhbCBkaXN0YW5jZXMuIFRoZSBuZXV0cmFsIGlzIHRoZSBjbGFzaWNhbCBuZXV0cmFsIG1vZGVsLCBzcGVjaWVzIGFyZSBlcXVpdmFsZW50IGFuZCBoYXZlIHRoZSBzYW1lIHBhcmFtZXRlcnM7IGluIHRoZSBoaWVyYXJjaGljYWwgbW9kZWwsIHNwZWNpZXMgaGF2ZSBjb21wZXRpdGl2ZSBkb21pbmFuY2UgYW5kIG1vcmUgZG9taW5hbnQgb25lcyBjYW4gcmVwbGFjZSB0aGUgbGVzcyBkb21pbmFudDsgdGhlIG5ldXRyYWwtd2l0aC1oYWJpdGF0IHNlbGVjdGlvbiBtb2RlbCwgaXMgYSBuZXV0cmFsIG1vZGVsIGJ1dCBwcm9wYWd1bGVzIHNlYXJjaCBhbiBlbXB0eSBwYXRjaCBzbyB0aGVpciBzdXJ2aXZhbCBpcyBlbnN1cmVkLiBTaW11bGF0aW9ucyB3ZXJlIHBlcmZvcm1lZCB1c2luZyBhIGZpeGVkIGdyb3d0aCByYXRlICgyKSwgbWlncmF0aW9uIGFuZCBhIHJlcGxhY2VtZW50IHJhdGUgb2YgMC4wMDAxIGFuZCAwLjMgcmVzcGVjdGl2ZWx5LiBGb2xsb3dpbmcgMjAwIHRpbWUgc3RlcHMgb2YgdGhlIG1vZGVsLCA2MCUgb2YgdGhlIGhhYml0YXQgd2FzIGRlc3Ryb3llZCwgcmVuZGVyaW5nIGl0IHVuYXZhaWxhYmxlIGZvciB0aGUgc3BlY2llcy4gVGhlIGRlc3RydWN0aW9uIG9mIGhhYml0YXQgcmVzdWx0ZWQgaW4gdGhlIGZvcm1hdGlvbiBvZiByZWd1bGFyIHBhdHRlcm5zLCB3aGVyZSBhbGwgcmVtYWluaW5nIHBhdGNoZXMgZXhoaWJpdGVkIGVxdWFsIHNpemVzLl0oRmlndXJlcy9BY3Jvc3NCZWhhdl9TcGVjaWVzX0Rpc3BlcnNhbF9MYW1iZGEyX3JlZ3VsYXIucG5nKQoKIVtSZWxhdGlvbnNoaXAgYmV0d2VlbiBTaGFubm9uIERpdmVyc2l0eSBhbmQgaGFiaXRhdCBwYXRjaCBzaXplIGZvciBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIG1vZGVsIChhY3Jvc3MgcGFuZWxzKSBhbmQgdmFyeWluZyBkaXNwZXJzYWwgZGlzdGFuY2VzLiBUaGUgbmV1dHJhbCBpcyB0aGUgY2xhc2ljYWwgbmV1dHJhbCBtb2RlbCwgc3BlY2llcyBhcmUgZXF1aXZhbGVudCBhbmQgaGF2ZSB0aGUgc2FtZSBwYXJhbWV0ZXJzOyBpbiB0aGUgaGllcmFyY2hpY2FsIG1vZGVsLCBzcGVjaWVzIGhhdmUgY29tcGV0aXRpdmUgZG9taW5hbmNlIGFuZCBtb3JlIGRvbWluYW50IG9uZXMgY2FuIHJlcGxhY2UgdGhlIGxlc3MgZG9taW5hbnQ7IHRoZSBuZXV0cmFsLXdpdGgtaGFiaXRhdCBzZWxlY3Rpb24gbW9kZWwsIGlzIGEgbmV1dHJhbCBtb2RlbCBidXQgcHJvcGFndWxlcyBzZWFyY2ggYW4gZW1wdHkgcGF0Y2ggc28gdGhlaXIgc3Vydml2YWwgaXMgZW5zdXJlZC4gU2ltdWxhdGlvbnMgd2VyZSBwZXJmb3JtZWQgdXNpbmcgYSBmaXhlZCBncm93dGggcmF0ZSAoMiksIG1pZ3JhdGlvbiBhbmQgYSByZXBsYWNlbWVudCByYXRlIG9mIDAuMDAwMSBhbmQgMC4zIHJlc3BlY3RpdmVseS4gRm9sbG93aW5nIDIwMCB0aW1lIHN0ZXBzIG9mIHRoZSBtb2RlbCwgNjAlIG9mIHRoZSBoYWJpdGF0IHdhcyBkZXN0cm95ZWQsIHJlbmRlcmluZyBpdCB1bmF2YWlsYWJsZSBmb3IgdGhlIHNwZWNpZXMuIFRoZSBkZXN0cnVjdGlvbiBvZiBoYWJpdGF0IHJlc3VsdGVkIGluIHRoZSBmb3JtYXRpb24gb2YgcmVndWxhciBwYXR0ZXJucywgd2hlcmUgYWxsIHJlbWFpbmluZyBwYXRjaGVzIGV4aGliaXRlZCBlcXVhbCBzaXplcy5dKEZpZ3VyZXMvQWNyb3NzQmVoYXZfU2hhbm5vbl9EaXNwZXJzYWxfTGFtYmRhMl9yZWd1bGFyLnBuZykKCiFbUmVsYXRpb25zaGlwIGJldHdlZW4gTnVtYmVyIG9mIFNwZWNpZXMgYW5kIG1lYW4gaGFiaXRhdCBwYXRjaCBzaXplIGZvciBkaWZmZXJlbnQgaGFiaXRhdCBkZXN0cnVjdGlvbiBwYXR0ZXJucyAoYWNyb3NzIHBhbmVscykgYW5kIHZhcnlpbmcgZGlzcGVyc2FsIGRpc3RhbmNlcy4gU2ltdWxhdGlvbnMgd2VyZSBwZXJmb3JtZWQgdXNpbmcgYSBuZXV0cmFsIG1vZGVsIHdpdGggYSBjb25zdGFudCBtaWdyYXRpb24gcmF0ZSAoMC4wMDAxKS4gRm9sbG93aW5nIDIwMCB0aW1lIHN0ZXBzIG9mIHRoZSBtb2RlbCwgNjAlIG9mIHRoZSBoYWJpdGF0IHdhcyBkZXN0cm95ZWQsIHJlbmRlcmluZyBpdCB1bmF2YWlsYWJsZSBmb3IgdGhlIHNwZWNpZXMuIEluIFJhbmRvbSBibG9jayBoYWJpdGF0IGRlc3RydWN0aW9uLCBibG9ja3Mgb2YgaGFiaXRhdCB3aXRoIHRoZSBzYW1lIHNpemUgKGhhYml0YXQgcGF0Y2ggc2l6ZSkgd2VyZSByYW5kb21seSBkaXN0cmlidXRlZCBvdmVyIHRoZSBzaW11bGF0aW9uIGdyaWQuIEFzIGEgcmVzdWx0LCBzb21lIHBhdGNoZXMgb3ZlcmxhcHBlZCwgbGVhZGluZyB0byBhIGRpc3RyaWJ1dGlvbiBvZiBwYXRjaCBzaXplcy4gSW4gcmVndWxhciBoYWJpdGF0IGRlc3RydWN0aW9uIHRoZSBoYWJpdGF0IHBhdGNoZXMgYXJlIGRpc3Bvc2VkIHdpdGggYSByZWd1bGFyIHBhdHRlcm4sIHNvIGFsbCByZW1haW5pbmcgaGFiaXRhdCBwYXRjaGVzIGV4aGliaXRlZCBlcXVhbCBzaXplcy5dKEZpZ3VyZXMvQWNyb3NzTG9zc19TcGVjaWVzX0Rpc3BlcnNhbF9MYW1iZGEyLnBuZykKCiFbXShGaWd1cmVzL0Fjcm9zc0xvc3NfU2hhbm5vbl9EaXNwZXJzYWxfTGFtYmRhMi5wbmcpAAAAAAAAAAAVDgAAAAAAAAAAAAAAAAAAAAAAABUOAAAAAAAAAAAAAAAAAAAAAAAAFQ4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqAAAAAAAAAGoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAVDgAACi0tLQpnZW9tZXRyeToKIC0gdm1hcmdpbj0xaW4KIC0gaG1hcmdpbj0uNmluCgpvdXRwdXQ6CiAgcGRmX2RvY3VtZW50OiAKICAgIGluY2x1ZGVzOgogICAgICBpbl9oZWFkZXI6IEFwcGVuZGljZXMuc3R5Ci0tLQojIEFwcGVuZGljZXMgLSBTdXBwbGVtZW50YXJ5IEluZm9ybWF0aW9uCgohW1JlbGF0aW9uc2hpcCBiZXR3ZWVuIG51bWJlciBvZiBzcGVjaWVzIGFuZCBtYXhpbXVtIHBhdGNoIHNpemUgZm9yIHZhcnlpbmcgZGlzcGVyc2FsIGRpc3RhbmNlcyBhbmQgZ3Jvd3RoIHJhdGUgcGFyYW1ldGVycyAgKGFjcm9zcyBwYW5lbHMpLiBTaW11bGF0aW9ucyB3ZXJlIHBlcmZvcm1lZCB1c2luZyBhIG5ldXRyYWwgbW9kZWwgd2l0aCBhIGNvbnN0YW50IG1pZ3JhdGlvbiByYXRlICgwLjAwMDEpLiBGb2xsb3dpbmcgMjAwIHRpbWUgc3RlcHMgb2YgdGhlIG1vZGVsLCA2MCUgb2YgdGhlIGhhYml0YXQgd2FzIGRlc3Ryb3llZCwgcmVuZGVyaW5nIGl0IHVuYXZhaWxhYmxlIGZvciB0aGUgc3BlY2llcy4gSGFiaXRhdCBibG9ja3Mgb2YgdGhlIHNhbWUgc2l6ZSAoaGFiaXRhdCBwYXRjaCBzaXplKSB3ZXJlIHJhbmRvbWx5IGRpc3RyaWJ1dGVkIG92ZXIgdGhlIHNpbXVsYXRpb24gZ3JpZC4gQXMgYSByZXN1bHQsIHNvbWUgcGF0Y2hlcyBvdmVybGFwcGVkLCBsZWFkaW5nIHRvIGEgZGlzdHJpYnV0aW9uIG9mIHBhdGNoIHNpemVzLiBUaGUgcmFuZ2Ugb2YgcGF0Y2ggc2l6ZXMgd2FzIGRldGVybWluZWQgYnkgdGhlIGhhYml0YXQgcGF0Y2ggc2l6ZSBwYXJhbWV0ZXIsIGRlZmluaW5nIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIHNpemVzIG9ic2VydmVkLl0oRmlndXJlcy9TcGVjaWVzX01heFBhdGNoX0Rpc3BlcnNhbF9MYW1iZGFfYmxvY2sucG5nKQoKIVtSZWxhdGlvbnNoaXAgYmV0d2VlbiBTaGFubm9uIERpdmVyc2l0eSBhbmQgbWF4aW11bSBwYXRjaCBzaXplIGZvciB2YXJ5aW5nIGRpc3BlcnNhbCBkaXN0YW5jZXMgYW5kIGdyb3d0aCByYXRlIHBhcmFtZXRlcnMgKGFjcm9zcyBwYW5lbHMpLiBTaW11bGF0aW9ucyB3ZXJlIHBlcmZvcm1lZCB1c2luZyBhIG5ldXRyYWwgbW9kZWwgd2l0aCBhIGNvbnN0YW50IG1pZ3JhdGlvbiByYXRlICgwLjAwMDEpLiBGb2xsb3dpbmcgMjAwIHRpbWUgc3RlcHMgb2YgdGhlIG1vZGVsLCA2MCUgb2YgdGhlIGhhYml0YXQgd2FzIGRlc3Ryb3llZCwgcmVuZGVyaW5nIGl0IHVuYXZhaWxhYmxlIGZvciB0aGUgc3BlY2llcy4gSGFiaXRhdCBibG9ja3Mgb2YgdGhlIHNhbWUgc2l6ZSAoaGFiaXRhdCBwYXRjaCBzaXplKSB3ZXJlIHJhbmRvbWx5IGRpc3RyaWJ1dGVkIG92ZXIgdGhlIHNpbXVsYXRpb24gZ3JpZC4gQXMgYSByZXN1bHQsIHNvbWUgcGF0Y2hlcyBvdmVybGFwcGVkLCBsZWFkaW5nIHRvIGEgZGlzdHJpYnV0aW9uIG9mIHBhdGNoIHNpemVzLiBUaGUgcmFuZ2Ugb2YgcGF0Y2ggc2l6ZXMgd2FzIGRldGVybWluZWQgYnkgdGhlIGhhYml0YXQgcGF0Y2ggc2l6ZSBwYXJhbWV0ZXIsIGRlZmluaW5nIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIHNpemVzIG9ic2VydmVkLl0oRmlndXJlcy9TaGFubm9uX01heFBhdGNoX0Rpc3BlcnNhbF9MYW1iZGFfYmxvY2sucG5nKQoKCiFbUmVsYXRpb25zaGlwIGJldHdlZW4gbnVtYmVyIG9mIHNwZWNpZXMgYW5kIGhhYml0YXQgcGF0Y2ggc2l6ZSBmb3IgdmFyeWluZyBkaXNwZXJzYWwgZGlzdGFuY2VzIGFuZCBncm93dGggcmF0ZSBwYXJhbWV0ZXJzICAoYWNyb3NzIHBhbmVscykuIFNpbXVsYXRpb25zIHdlcmUgcGVyZm9ybWVkIHVzaW5nIGEgY29tcGV0aXRpdmUgaGllcmFyY2hpY2FsIG1vZGVsIHdpdGggY29uc3RhbnQgbWlncmF0aW9uIGFuZCBhIHJlcGxhY2VtZW50IHJhdGUgb2YgMC4wMDAxIGFuZCAwLjMgcmVzcGVjdGl2ZWx5LiBGb2xsb3dpbmcgMjAwIHRpbWUgc3RlcHMgb2YgdGhlIG1vZGVsLCA2MCUgb2YgdGhlIGhhYml0YXQgd2FzIGRlc3Ryb3llZCwgcmVuZGVyaW5nIGl0IHVuYXZhaWxhYmxlIGZvciB0aGUgc3BlY2llcy4gVGhlIGRlc3RydWN0aW9uIG9mIGhhYml0YXQgcmVzdWx0ZWQgaW4gdGhlIGZvcm1hdGlvbiBvZiByZWd1bGFyIHBhdHRlcm5zLCB3aGVyZSBhbGwgcmVtYWluaW5nIHBhdGNoZXMgZXhoaWJpdGVkIGVxdWFsIHNpemVzLl0oRmlndXJlcy9IaWVyYXJjaGljYWxfU3BlY2llc19EaXNwZXJzYWxfTGFtYmRhX3JlZ3VsYXIucG5nKQoKIVtSZWxhdGlvbnNoaXAgYmV0d2VlbiBTaGFubm9uIERpdmVyc2l0eSBhbmQgaGFiaXRhdCBwYXRjaCBzaXplIGZvciB2YXJ5aW5nIGRpc3BlcnNhbCBkaXN0YW5jZXMgYW5kIGdyb3d0aCByYXRlIHBhcmFtZXRlcnMgIChhY3Jvc3MgcGFuZWxzKS4gU2ltdWxhdGlvbnMgd2VyZSBwZXJmb3JtZWQgdXNpbmcgYSBjb21wZXRpdGl2ZSBoaWVyYXJjaGljYWwgbW9kZWwgd2l0aCBjb25zdGFudCBtaWdyYXRpb24gYW5kIGEgcmVwbGFjZW1lbnQgcmF0ZSBvZiAwLjAwMDEgYW5kIDAuMyByZXNwZWN0aXZlbHkuIEZvbGxvd2luZyAyMDAgdGltZSBzdGVwcyBvZiB0aGUgbW9kZWwsIDYwJSBvZiB0aGUgaGFiaXRhdCB3YXMgZGVzdHJveWVkLCByZW5kZXJpbmcgaXQgdW5hdmFpbGFibGUgZm9yIHRoZSBzcGVjaWVzLiBUaGUgZGVzdHJ1Y3Rpb24gb2YgaGFiaXRhdCByZXN1bHRlZCBpbiB0aGUgZm9ybWF0aW9uIG9mIHJlZ3VsYXIgcGF0dGVybnMsIHdoZXJlIGFsbCByZW1haW5pbmcgcGF0Y2hlcyBleGhpYml0ZWQgZXF1YWwgc2l6ZXMuXShGaWd1cmVzL0hpZXJhcmNoaWNhbF9TaGFubm9uX0Rpc3BlcnNhbF9MYW1iZGFfcmVndWxhci5wbmcpCgoKIVtSZWxhdGlvbnNoaXAgYmV0d2VlbiBOdW1iZXIgb2YgU3BlY2llcyBhbmQgbWVhbiBoYWJpdGF0IHBhdGNoIHNpemUgZm9yIGRpZmZlcmVudCBoYWJpdGF0IGRlc3RydWN0aW9uIHBhdHRlcm5zIChhY3Jvc3MgcGFuZWxzKSBhbmQgdmFyeWluZyBkaXNwZXJzYWwgZGlzdGFuY2VzLiBTaW11bGF0aW9ucyB3ZXJlIHBlcmZvcm1lZCB1c2luZyBhIG5ldXRyYWwgbW9kZWwgd2l0aCBhIGNvbnN0YW50IG1pZ3JhdGlvbiByYXRlICgwLjAwMDEpLiBGb2xsb3dpbmcgMjAwIHRpbWUgc3RlcHMgb2YgdGhlIG1vZGVsLCA2MCUgb2YgdGhlIGhhYml0YXQgd2FzIGRlc3Ryb3llZCwgcmVuZGVyaW5nIGl0IHVuYXZhaWxhYmxlIGZvciB0aGUgc3BlY2llcy4gSW4gUmFuZG9tIGJsb2NrIGhhYml0YXQgZGVzdHJ1Y3Rpb24sIGJsb2NrcyBvZiBoYWJpdGF0IHdpdGggdGhlIHNhbWUgc2l6ZSAoaGFiaXRhdCBwYXRjaCBzaXplKSB3ZXJlIHJhbmRvbWx5IGRpc3RyaWJ1dGVkIG92ZXIgdGhlIHNpbXVsYXRpb24gZ3JpZC4gQXMgYSByZXN1bHQsIHNvbWUgcGF0Y2hlcyBvdmVybGFwcGVkLCBsZWFkaW5nIHRvIGEgZGlzdHJpYnV0aW9uIG9mIHBhdGNoIHNpemVzLiBJbiByZWd1bGFyIGhhYml0YXQgZGVzdHJ1Y3Rpb24gdGhlIGhhYml0YXQgcGF0Y2hlcyBhcmUgZGlzcG9zZWQgd2l0aCBhIHJlZ3VsYXIgcGF0dGVybiwgc28gYWxsIHJlbWFpbmluZyBoYWJpdGF0IHBhdGNoZXMgZXhoaWJpdGVkIGVxdWFsIHNpemVzLl0oRmlndXJlcy9BY3Jvc3NMb3NzX1NwZWNpZXNfRGlzcGVyc2FsX0xhbWJkYTIucG5nKQoKIVtdKEZpZ3VyZXMvQWNyb3NzTG9zc19TaGFubm9uX0Rpc3BlcnNhbF9MYW1iZGEyLnBuZykAAAAAAAAAAPMQAAAAAAAAAAAAAAAAAAAAAAAA8xAAAAAAAAAAAAAAAAAAAAAAAAAfNQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsDAAAAAAAAawMAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "RunSims.Rmd",
			"settings":
			{
				"buffer_size": 43121,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 2678,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAG4AAAAAAAAAbwAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuAAAAAAAAAG4AAAAAAAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAG8AAAAAAAAAcAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvAAAAAAAAAG8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHAAAAAAAAAAcQAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					2,
					"left_delete",
					null,
					"AgAAAHAAAAAAAAAAcAAAAAAAAAABAAAAIG8AAAAAAAAAbwAAAAAAAAABAAAAKg",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxAAAAAAAAAHEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "Lea"
					},
					"AwAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABxAAAAAAAAAAAAAABxAAAAAAAAAHIAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvAAAAAAAAAG8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAHEAAAAAAAAAcQAAAAAAAAABAAAAYQ",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByAAAAAAAAAHIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "onardo"
					},
					"BgAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAABzAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAB2AAAAAAAAAHcAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxAAAAAAAAAHEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " A."
					},
					"AwAAAHcAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB5AAAAAAAAAAAAAAB5AAAAAAAAAHoAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3AAAAAAAAAHcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " Saravia"
					},
					"CAAAAHoAAAAAAAAAewAAAAAAAAAAAAAAewAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAAH0AAAAAAAAAAAAAAH0AAAAAAAAAfgAAAAAAAAAAAAAAfgAAAAAAAAB/AAAAAAAAAAAAAAB/AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACCAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6AAAAAAAAAHoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIIAAAAAAAAAgwAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCAAAAAAAAAIIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " Ulis"
					},
					"BQAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAIYAAAAAAAAAAAAAAIYAAAAAAAAAhwAAAAAAAAAAAAAAhwAAAAAAAACIAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDAAAAAAAAAIMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "es"
					},
					"AgAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIAAAAAAAAAIgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " Balza."
					},
					"BwAAAIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAI0AAAAAAAAAAAAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAACPAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAkQAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAAAAAAAAAIoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"left_delete",
					null,
					"AQAAAJAAAAAAAAAAkAAAAAAAAAABAAAALg",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAAAAAAAAAJEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJAAAAAAAAAAkQAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " Fernando"
					},
					"CQAAAJEAAAAAAAAAkgAAAAAAAAAAAAAAkgAAAAAAAACTAAAAAAAAAAAAAACTAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAlQAAAAAAAAAAAAAAlQAAAAAAAACWAAAAAAAAAAAAAACWAAAAAAAAAJcAAAAAAAAAAAAAAJcAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACZAAAAAAAAAAAAAACZAAAAAAAAAJoAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAAAAAAAAAJEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " Momo?"
					},
					"BgAAAJoAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAJ0AAAAAAAAAAAAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAACfAAAAAAAAAKAAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaAAAAAAAAAJoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKAAAAAAAAAAoQAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAKAAAAAAAAAAoAAAAAAAAAABAAAAIA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAAAAAAAAAKEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKAAAAAAAAAAoQAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKEAAAAAAAAAogAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAAAAAAAAAKEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAAKIAAAAAAAAAtAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiAAAAAAAAAKIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "<."
					},
					"AgAAALQAAAAAAAAAtQAAAAAAAAAAAAAAtQAAAAAAAAC2AAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0AAAAAAAAALQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"left_delete",
					null,
					"AQAAALUAAAAAAAAAtQAAAAAAAAABAAAALg",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2AAAAAAAAALYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAALUAAAAAAAAAtgAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1AAAAAAAAALUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAALUAAAAAAAAAyAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1AAAAAAAAALUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAMkAAAAAAAAAygAAAAAAAAAAAAAAygAAAAAAAADLAAAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJAAAAAAAAAMkAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "notes.md",
			"settings":
			{
				"buffer_size": 20358,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMNEAAAAAAAAxEQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMNEAAAAAAAAw0QAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAAMNEAAAAAAAAw0QAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMREAAAAAAAAxEQAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "----"
					},
					"BAAAAMNEAAAAAAAAxEQAAAAAAAAAAAAAxEQAAAAAAADFRAAAAAAAAAAAAADFRAAAAAAAAMZEAAAAAAAAAAAAAMZEAAAAAAAAx0QAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMNEAAAAAAAAw0QAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAMdEAAAAAAAAyEQAAAAAAAAAAAAAyEQAAAAAAADJRAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMdEAAAAAAAAx0QAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAMhEAAAAAAAA1EQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMhEAAAAAAAAyEQAAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANREAAAAAAAA1UQAAAAAAAAAAAAA1UQAAAAAAADWRAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANREAAAAAAAA1EQAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"paste",
					null,
					"AQAAANZEAAAAAAAAskgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANZEAAAAAAAA1kQAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALJIAAAAAAAAs0gAAAAAAAAAAAAAs0gAAAAAAAC0SAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALJIAAAAAAAAskgAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAEAAAAAAAAAAgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAAAIAAAAAAAAA6wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " Par"
					},
					"BAAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "rafo"
					},
					"BAAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQAAAAAAAAAFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " de"
					},
					"AwAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAwAAAAAAAAADQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "codigo"
					},
					"BgAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					17,
					"left_delete",
					null,
					"EQAAABIAAAAAAAAAEgAAAAAAAAABAAAAbxEAAAAAAAAAEQAAAAAAAAABAAAAZxAAAAAAAAAAEAAAAAAAAAABAAAAaQ8AAAAAAAAADwAAAAAAAAABAAAAZA4AAAAAAAAADgAAAAAAAAABAAAAbw0AAAAAAAAADQAAAAAAAAABAAAAYwwAAAAAAAAADAAAAAAAAAABAAAAIAsAAAAAAAAACwAAAAAAAAABAAAAZQoAAAAAAAAACgAAAAAAAAABAAAAZAkAAAAAAAAACQAAAAAAAAABAAAAIAgAAAAAAAAACAAAAAAAAAABAAAAbwcAAAAAAAAABwAAAAAAAAABAAAAZgYAAAAAAAAABgAAAAAAAAABAAAAYQUAAAAAAAAABQAAAAAAAAABAAAAcgQAAAAAAAAABAAAAAAAAAABAAAAcgMAAAAAAAAAAwAAAAAAAAABAAAAYQIAAAAAAAAAAgAAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "Source"
					},
					"BgAAAAIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " coda"
					},
					"BQAAAAgAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAANAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAAwAAAAAAAAADAAAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAAwAAAAAAAAADQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " parag"
					},
					"BgAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "rahp"
					},
					"BAAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					2,
					"left_delete",
					null,
					"AgAAABYAAAAAAAAAFgAAAAAAAAABAAAAcBUAAAAAAAAAFQAAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAAFwAAAAAAAAAXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "ph"
					},
					"AgAAABUAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAXAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " deleted"
					},
					"CAAAABcAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGwAAAAAAAAAAAAAAGwAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAAB0AAAAAAAAAAAAAAB0AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwAAAAAAAAAXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAB8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " anom"
					},
					"BQAAACIAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgAAAAAAAAAiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAACYAAAAAAAAAJgAAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "nimyz"
					},
					"BQAAACYAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAArAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAACsAAAAAAAAALAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwAAAAAAAAArAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAACwAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC8AAAAAAAAAAAAAAC8AAAAAAAAAMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAAAAAAAAAAsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " manuscr"
					},
					"CAAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "ipt"
					},
					"AwAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "CoverLetter.md",
			"settings":
			{
				"buffer_size": 2079,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "Dear Editor,"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAjQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAACNBgAARGVhciBFZGl0b3ItaW4tQ2hpZWYsCgpQbGVhc2UgZmluZCBlbmNsb3NlZCBvdXIgbWFudXNjcmlwdCBlbnRpdGxlZCAiRXhwbG9yaW5nIE11bHRpLVNwZWNpZXMgTW9kZWxzIHRvIFZhbGlkYXRlIEhhYml0YXQgUHJlc2VydmF0aW9uIFN0cmF0ZWdpZXMgZm9yIEJpb2RpdmVyc2l0eSBDb25zZXJ2YXRpb24sIiB3aGljaCB3ZSB3b3VsZCBsaWtlIHRvIHN1Ym1pdCBmb3IgY29uc2lkZXJhdGlvbiBmb3IgcHVibGljYXRpb24gaW4gRnVuY3Rpb25hbCBFY29sb2d5LgoKSW4gdGhpcyBzdHVkeSwgd2UgYWRkcmVzcyB0aGUgY3JpdGljYWwgaXNzdWUgb2YgYmlvZGl2ZXJzaXR5IGNvbnNlcnZhdGlvbiBhbWlkc3QgaGFiaXRhdCBsb3NzIGJ5IGludmVzdGlnYXRpbmcgdGhlIGVmZmVjdGl2ZW5lc3Mgb2YgcHJlc2VydmluZyBzZXZlcmFsIHNtYWxsZXIgaGFiaXRhdCBhcmVhcyAoU1MpIHZlcnN1cyBhIHNpbmdsZSBsYXJnZSBhcmVhIChTTCkuIE91ciByZXNlYXJjaCBlbXBsb3lzIGlubm92YXRpdmUgbXVsdGktc3BlY2llcyBtb2RlbHMsIGludGVncmF0aW5nIGNvbW11bml0eSBhc3NlbWJseSBkeW5hbWljcyBhbmQgZWx1Y2lkYXRpbmcgdGhlIHJvbGUgb2YgZGlzcGVyc2FsIGNhcGFiaWxpdGllcyBpbiBzaGFwaW5nIGJpb2RpdmVyc2l0eSBwYXR0ZXJucy4KCktleSBpbnNpZ2h0cyBmcm9tIG91ciBzdHVkeSBpbmNsdWRlIHRoZSBpZGVudGlmaWNhdGlvbiBvZiBub3ZlbCBtZWNoYW5pc21zIHVuZGVybHlpbmcgaGFiaXRhdCBwcmVzZXJ2YXRpb24gc3RyYXRlZ2llcyBhbmQgdGhlaXIgaW1wbGljYXRpb25zIGZvciBiaW9kaXZlcnNpdHkgY29uc2VydmF0aW9uIGVmZm9ydHMuIEJ5IGV4cGxvcmluZyB2YXJpb3VzIG1vZGVsaW5nIGFwcHJvYWNoZXMgYW5kIGluY29ycG9yYXRpbmcgZmFjdG9ycyBzdWNoIGFzIGNvbW11bml0eSBhc3NlbWJseSBwcm9jZXNzZXMsIG91ciByZXNlYXJjaCBvZmZlcnMgdmFsdWFibGUgY29udHJpYnV0aW9ucyB0byB1bmRlcnN0YW5kaW5nIHRoZSBjb21wbGV4IGR5bmFtaWNzIG9mIGJpb2RpdmVyc2l0eSBjb25zZXJ2YXRpb24uCgpXZSBiZWxpZXZlIHRoYXQgb3VyIG1hbnVzY3JpcHQgYWxpZ25zIHdlbGwgd2l0aCB0aGUgc2NvcGUgYW5kIG9iamVjdGl2ZXMgb2YgRnVuY3Rpb25hbCBFY29sb2d5LCBnaXZlbiBpdHMgZm9jdXMgb24gYWR2YW5jaW5nIHRoZSB1bmRlcnN0YW5kaW5nIG9mIGVjb2xvZ2ljYWwgcHJvY2Vzc2VzIGFuZCB0aGVpciBpbXBsaWNhdGlvbnMgZm9yIGVjb3N5c3RlbSBmdW5jdGlvbmluZy4gVGhlIGludGVyZGlzY2lwbGluYXJ5IG5hdHVyZSBvZiBvdXIgcmVzZWFyY2gsIGNvbWJpbmluZyB0aGVvcmV0aWNhbCBtb2RlbGluZyB3aXRoIHByYWN0aWNhbCBpbXBsaWNhdGlvbnMgZm9yIGNvbnNlcnZhdGlvbiBtYW5hZ2VtZW50LCBtYWtlcyBpdCB3ZWxsLXN1aXRlZCBmb3IgcHVibGljYXRpb24gaW4geW91ciBlc3RlZW1lZCBqb3VybmFsLgoKV2UgaG9wZSB0aGF0IG91ciBtYW51c2NyaXB0IHdpbGwgYmUgb2YgaW50ZXJlc3QgdG8gdGhlIGpvdXJuYWwncyByZWFkZXJzaGlwIGFuZCBjb250cmlidXRlIHRvIG9uZ29pbmcgZGlzY3Vzc2lvbnMgb24gYmlvZGl2ZXJzaXR5IGNvbnNlcnZhdGlvbiBhbmQgZWNvc3lzdGVtIG1hbmFnZW1lbnQuIFRoYW5rIHlvdSBmb3IgY29uc2lkZXJpbmcgb3VyIHN1Ym1pc3Npb24u",
					"AQAAAAAAAAABAAAAAAAAAAAAAACNBgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAFQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "Leonardo"
					},
					"CQAAAAoIAAAAAAAACwgAAAAAAAAAAAAACwgAAAAAAAALCAAAAAAAAAoAAABbWW91ciBOYW1lCwgAAAAAAAAMCAAAAAAAAAAAAAAMCAAAAAAAAA0IAAAAAAAAAAAAAA0IAAAAAAAADggAAAAAAAAAAAAADggAAAAAAAAPCAAAAAAAAAAAAAAPCAAAAAAAABAIAAAAAAAAAAAAABAIAAAAAAAAEQgAAAAAAAAAAAAAEQgAAAAAAAASCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAgAAAAAAAAKCAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " A."
					},
					"AwAAABIIAAAAAAAAEwgAAAAAAAAAAAAAEwgAAAAAAAAUCAAAAAAAAAAAAAAUCAAAAAAAABUIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEggAAAAAAAASCAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " Saravia"
					},
					"CAAAABUIAAAAAAAAFggAAAAAAAAAAAAAFggAAAAAAAAXCAAAAAAAAAAAAAAXCAAAAAAAABgIAAAAAAAAAAAAABgIAAAAAAAAGQgAAAAAAAAAAAAAGQgAAAAAAAAaCAAAAAAAAAAAAAAaCAAAAAAAABsIAAAAAAAAAAAAABsIAAAAAAAAHAgAAAAAAAAAAAAAHAgAAAAAAAAdCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQgAAAAAAAAVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB0IAAAAAAAAHggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQgAAAAAAAAdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAB4IAAAAAAAAHggAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAHwgAAAAAAAAfCAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAkIAAAAAAAACggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQgAAAAAAAAJCAAAAAAAAAAAAAAAAGRA"
				]
			]
		},
		{
			"file": "/Users/leonardosaravia/Dropbox/Projects/ChacoSecoFires/FireBibliography.md",
			"settings":
			{
				"buffer_size": 2984,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "Fletcher, M., Wood, S. W., & Haberle, S. G. (2014)"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAnQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMUKAAAAAAAAxgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQoAAAAAAADFCgAAAAAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOwJAAAAAAAA7QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AkAAAAAAADsCQAAAAAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAE0JAAAAAAAATgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQkAAAAAAABNCQAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGYIAAAAAAAAZwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZggAAAAAAABmCAAAAAAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFsHAAAAAAAAXAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwcAAAAAAABbBwAAAAAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJgFAAAAAAAAmQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAUAAAAAAACYBQAAAAAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALUEAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQQAAAAAAAC1BAAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMsDAAAAAAAAzAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywMAAAAAAADLAwAAAAAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFUCAAAAAAAAVgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQIAAAAAAABVAgAAAAAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGYBAAAAAAAAZwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgEAAAAAAABmAQAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKYAAAAAAAAApwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgAAAAAAAACmAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "results.md",
			"settings":
			{
				"buffer_size": 8810,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"syrm",
				"Set Syntax: Markdown"
			],
			[
				"sy",
				"Set Syntax: Pandoc"
			],
			[
				"Package Control: li",
				"Package Control: List Packages"
			],
			[
				"packages",
				"Preferences: Browse Packages"
			],
			[
				"pa",
				"Package Control: Discover Packages"
			],
			[
				"synr",
				"Set Syntax: R"
			],
			[
				"tab",
				"Table Editor: Enable for current view"
			],
			[
				"con",
				"Package Control: Install Package"
			],
			[
				"syr",
				"Set Syntax: R"
			],
			[
				"te s",
				"Table Editor: Set table syntax 'Simple' for current view"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"synR",
				"Set Syntax: R"
			],
			[
				"synpn",
				"Set Syntax: Pandoc"
			],
			[
				"sym",
				"Set Syntax: Makefile"
			],
			[
				"ma",
				"Markdown Preview: Python Markdown: Preview in Browser"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"syp",
				"Set Syntax: Pandoc"
			],
			[
				"syR",
				"Set Syntax: R"
			],
			[
				"r",
				"Rot13 Selection"
			],
			[
				"synp",
				"Set Syntax: Pandoc"
			],
			[
				"syn",
				"Set Syntax: Pandoc"
			],
			[
				"Snippet: ",
				"Snippet: Add eta-squared abbreviation based n LaTeX definition"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"previ",
				"Markdown Preview: preview in Browser"
			],
			[
				"mark",
				"Markdown Preview: open Markdown Cheat sheet"
			],
			[
				"prev",
				"Markdown Preview: preview in Browser"
			],
			[
				"contr",
				"Package Control: Install Package"
			]
		],
		"width": 602.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/leonardosaravia/Library/Application Support/Sublime Text/Packages/Table Editor/README.md",
		"/Users/leonardosaravia/Academicos/CompletedProjects/CriticalTransition/ctnhm.md",
		"/home/leonardo/Downloads/FiresDeforestedAreasAmazon (1).csv",
		"/home/leonardo/Academicos/GitProjects/Networks/TrophicResources/TrophicResourcesEdaphic.md",
		"/home/leonardo/Academicos/GitProjects/Networks/SouthFWReview/Weddell_stressors.md",
		"/home/leonardo/Academicos/Cursos/EcoMathLujan2022/Curso1.1.Rmd",
		"/home/leonardo/Dropbox/Cursos/MaestriaUNQ_UNNOBA/IntroToNetLogo1.Rmd",
		"/home/leonardo/Downloads/FiresDeforestedAreasAmazon.csv",
		"/home/leonardo/Academicos/Cursos/MetodosAvanzados2023/curso03.jl",
		"/home/leonardo/Academicos/Cursos/MetodosAvanzados2023/Curso1.3.Rmd",
		"/home/leonardo/Academicos/Cursos/MetodosAvanzados2023/Curso1.1.Rmd",
		"/home/leonardo/Academicos/Cursos/MetodosAvanzados2023/curso01.jl",
		"/home/leonardo/Academicos/Cursos/MetodosAvanzados2023/Curso1.4.Rmd",
		"/home/leonardo/Academicos/Cursos/MetodosAvanzados2023/Curso1.3SIS.Rmd",
		"/home/leonardo/Academicos/Cursos/MetodosAvanzados2023/Dia01.jl",
		"/home/leonardo/Academicos/Cursos/MetodosAvanzados2023/Dia01LogisticoDis.jl",
		"/home/leonardo/Academicos/Cursos/CodigoDia01/experimento01.jl",
		"/home/leonardo/Academicos/Cursos/EcoMathLujan2022/curso01.jl",
		"/home/leonardo/Academicos/GitProjects/Networks/SouthFWReview/manuscript.md",
		"/home/leonardo/Academicos/Cursos/MetodosAvanzados2023/Curso1.6.Rmd",
		"/home/leonardo/Academicos/Cursos/MetodosAvanzados2023/Curso1.5.Rmd",
		"/home/leonardo/Dropbox/Pandoc/Git_commands.md",
		"/home/leonardo/Academicos/GitProjects/Networks/TrophicResources/TREHihglighted.tex",
		"/home/leonardo/Academicos/GitProjects/Networks/TrophicResources/Soil Ecology.bib",
		"/home/leonardo/Downloads/plutoUI_cheatsheet.jl",
		"/home/leonardo/.cache/.fr-tLtkeo/Everything.Everywhere.All.at.Once.2022.720p.BluRay.x264.DTS-MT.srt",
		"/home/leonardo/Academicos/GitProjects/Networks/NetworkComplexity/potter_topp.R",
		"/home/leonardo/Academicos/GitProjects/Networks/NetworkComplexity/Interactions_strength.Rmd",
		"/home/leonardo/Academicos/GitProjects/Networks/NetworkComplexity/Plot_IS.Rmd",
		"/home/leonardo/Academicos/Cursos/CodigoDia01/pasosGithub.md",
		"/home/leonardo/Academicos/Cursos/EcoMathLujan2022/Curso1.3SIS.Rmd",
		"/home/leonardo/Academicos/Cursos/MetodosAvanzados2023/Informacion.md",
		"/home/leonardo/Dropbox/CV/cv2020_corto_untdf.md",
		"/home/leonardo/Academicos/GitProjects/Networks/SouthFWReview/Data/WeddellSea_links_original.csv",
		"/home/leonardo/Academicos/GitProjects/Networks/SouthFWReview/Data/WeddellSea_nodes_metrics.csv",
		"/home/leonardo/Dropbox/Cursos/MaestriaUNQ_UNNOBA/Fractales.Rmd",
		"/home/leonardo/Academicos/CompletedProjects/MetaWebsAssembly/MetaWebAssemblyModelAnalysis.Rmd",
		"/home/leonardo/Academicos/GitProjects/Networks/NetworkComplexity/LIM.Rmd",
		"/home/leonardo/Academicos/GitProjects/Networks/SouthFWReview/.git/MERGE_MSG",
		"/home/leonardo/Dropbox/Projects/WeddellSea/Manuscript/Manuscript.Rmd",
		"/home/leonardo/Academicos/GitProjects/Networks/SouthFWReview/README.md",
		"/home/leonardo/Academicos/CompletedProjects/MetaWebsAssembly/MetawebsAssembly.md",
		"/home/leonardo/Dropbox/Collaborations/NetworkGolfoSanJorge/.gitignore",
		"/home/leonardo/Dropbox/Collaborations/NetworkGolfoSanJorge/TopologicalAnalysis.Rmd",
		"/home/leonardo/Dropbox/Projects/multiSLOSS/.gitignore",
		"/home/leonardo/Dropbox/Projects/MetaWebsAssembly/JAE_review3.md",
		"/home/leonardo/Dropbox/Revisiones/revistammsb/review_msb_2021.md",
		"/home/leonardo/Academicos/GitProjects/MacroalgalModel/ALB Estimations/Data/PAR/icedays_data.txt",
		"/home/leonardo/Academicos/GitProjects/MacroalgalModel/ALB Estimations/Data/PAR/MERRA Ice Cover.Rmd",
		"/home/leonardo/Academicos/GitProjects/MacroalgalModel/ALB Estimations/Data/PAR/ice_cover_days.txt",
		"/home/leonardo/Dropbox/Revisiones/revistammsb/revision2021.md",
		"/home/leonardo/Dropbox/Revisiones/JTB2020/reviewJTB2020.md",
		"/home/leonardo/Dropbox/Revisiones/Oikos2018/revision.md",
		"/home/leonardo/Dropbox/Revisiones/PeerJ2018/revision.md",
		"/home/leonardo/.cache/.fr-Uwh4Oc/experiment_setups/100.nlogo",
		"/home/leonardo/.cache/.fr-XqQCO9/experiment_setups/99.nlogo",
		"/home/leonardo/.cache/.fr-Pooqic/experiment_setups/100.nlogo",
		"/home/leonardo/.cache/.fr-5xcy8c/experiment_setups/1.nlogo",
		"/home/leonardo/Academicos/GitProjects/Networks/NetworkComplexity/Fluxweb_Potter.Rmd",
		"/home/leonardo/Academicos/GitProjects/Networks/FluxesInteractionStrengths/Data/fluxweb/traits.txt",
		"/home/leonardo/Dropbox/Projects/DynamicForestExtinction/AmazonEmpirical.md",
		"/home/leonardo/Dropbox/Projects/DynamicForestExtinction/DynCritTrans.Rmd",
		"/home/leonardo/Dropbox/Projects/DynamicForestExtinction/results.md",
		"/home/leonardo/Dropbox/Projects/DynamicForestExtinction/notes.md",
		"/home/leonardo/Dropbox/Projects/DynamicForestExtinction/SLOSS.Rmd",
		"/home/leonardo/Academicos/GitProjects/Networks/AntarcticFoodWeb/notes.md",
		"/home/leonardo/Academicos/GitProjects/Networks/AntarcticFoodWeb/Draft.txt",
		"/home/leonardo/Academicos/GitProjects/Manticore/README.md",
		"/home/leonardo/Academicos/GitProjects/LongTermPKP/README.md",
		"/home/leonardo/Academicos/GitProjects/LongTermPKP/Analysis_01.Rmd",
		"/home/leonardo/Academicos/GitProjects/LongTermPKP/Notes.md",
		"/home/leonardo/Academicos/GitProjects/pollinatorsNL/plant_parameters.csv",
		"/home/leonardo/Dropbox/CV/cv2020.md",
		"/home/leonardo/Dropbox/CV/cv2020_en.md",
		"/home/leonardo/Academicos/GitProjects/Networks/SoilBodySizeSpectra/Data/body_size.txt",
		"/home/leonardo/Academicos/GitProjects/pollinatorsNL/plant_parametersEx1.csv",
		"/home/leonardo/.config/sublime-text-3/Packages/Table Editor/Default (Linux).sublime-keymap",
		"/home/leonardo/.config/sublime-text-3/Packages/Table Editor/README.md",
		"/home/leonardo/Dropbox/Projects/MetaWebsAssembly/MetawebsAssembly_old.md",
		"/home/leonardo/Dropbox/Projects/GlobalFireTippingPoints/Data/Predicted_bF_rcp45.csv",
		"/home/leonardo/Dropbox/Projects/GlobalFireTippingPoints/Data/Predicted_bF_rcp85.csv",
		"/home/leonardo/Academicos/GitProjects/fireNL/Data/Predicted_bF_rcp45.csv",
		"/home/leonardo/Academicos/GitProjects/fireNL/Data/Estimated_bF.csv",
		"/home/leonardo/Dropbox/Projects/MetaWebsAssembly/Data/metaweb_SW_trophic.txt",
		"/home/leonardo/Dropbox/Projects/MetaWebsAssembly/Data/presence_SW_trophic.txt",
		"/home/leonardo/Downloads/metaweb_SW_trophic.txt",
		"/home/leonardo/Downloads/presence_SW_trophic.txt",
		"/home/leonardo/Dropbox/Projects/MetaWebsAssembly/MetawebsAssembly.md",
		"/home/leonardo/Dropbox/Projects/MetaWebsAssembly/MetawebsAssembly_LAS.md",
		"/home/leonardo/.gitconfig",
		"/home/leonardo/Dropbox/Projects/GlobalFireTippingPoints/results.Rmd",
		"/home/leonardo/Dropbox/Projects/GlobalFireTippingPoints/Data/GDPP_rcp45_Amazon.csv",
		"/home/leonardo/Dropbox/Projects/GlobalFireTippingPoints/Data/TerraClimatePrNABorealForest.csv",
		"/home/leonardo/Dropbox/Projects/AustraliaTippingPoint/Notes.md",
		"/home/leonardo/Academicos/GitProjects/fireNL/Notes.md",
		"/home/leonardo/Exported Items.bib",
		"/home/leonardo/Dropbox/Collaborations/NetworkGolfoSanJorge/Notes.md",
		"/home/leonardo/Academicos/GitProjects/NuevoProyecto/analisisdedatos.Rmd",
		"/home/leonardo/Academicos/GitProjects/pollinatorsNL/Read_behaviorspace_sim.Rmd",
		"/home/leonardo/Dropbox/Projects/MetaWebsAssembly/notes.txt",
		"/home/leonardo/Downloads/mean.values_dataLiam.csv",
		"/home/leonardo/Dropbox/Projects/GlobalFireTippingPoints/Notes.md",
		"/home/leonardo/Exported Items1.bib",
		"/home/leonardo/Exported Items2.bib",
		"/home/leonardo/Academicos/GitProjects/pollinatorsNL/read_analyse_NL_simulations_01092021.R",
		"/home/leonardo/Academicos/GitProjects/pollinatorsNL/pollinator_parameters.csv",
		"/home/leonardo/Academicos/GitProjects/fireNL/README.md",
		"/home/leonardo/Academicos/GitProjects/fireNL/DynamicFireAnalysis.Rmd",
		"/home/leonardo/Academicos/GitProjects/fireNL/DynamicFireForestAnalysis.Rmd",
		"/home/leonardo/Dropbox/Projects/GlobalFireTippingPoints/presentationWSC.Rmd",
		"/home/leonardo/Academicos/GitProjects/pollinatorsNL/Fractal_landscapes.md",
		"/home/leonardo/Dropbox/Cursos/ABMCourse/vacasypasto1_FacBusq.nlogo",
		"/home/leonardo/Dropbox/Projects/MetaWebsAssembly/JAE_review_reply.md",
		"/home/leonardo/Academicos/GitProjects/pollinatorsNL/pollinator_parameters_02.csv",
		"/home/leonardo/Dropbox/Collaborations/NetworkGolfoSanJorge/Red_GSJ2711.md",
		"/home/leonardo/Downloads/Red_GSJ2711.md",
		"/home/leonardo/Dropbox/Collaborations/CoastCarb/Talk_Padova.Rmd",
		"/home/leonardo/Dropbox/CV/CIC2021/FormulaDeIntensidadDeInteracion.md",
		"/home/leonardo/Downloads/dataset_viajes_sube.csv",
		"/home/leonardo/Dropbox/Projects/MetaWebsAssembly/FiguresTables.md",
		"/home/leonardo/Dropbox/Projects/MetaWebsAssembly/MetawebsAssembly_NPK.md",
		"/home/leonardo/Dropbox/Projects/MetaWebsAssembly/Appendices.md",
		"/home/leonardo/Downloads/plot_script.py",
		"/home/leonardo/Academicos/GitProjects/covid19/GraficaMovilidadSUBE.r",
		"/home/leonardo/Dropbox/Projects/Antarctica/MacroalgalModel/Data/Clark2013/README",
		"/home/leonardo/Downloads/Figure 3.r",
		"/home/leonardo/Academicos/GitProjects/proyecciones/index.Rmd",
		"/home/leonardo/Academicos/GitProjects/covid19/coronavirus.r"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Figure 4",
			"patch size",
			"only",
			"cube ",
			"arrangement",
			"auto detect",
			"auto",
			"Model",
			"model",
			"Model",
			"model",
			"Hopkin1997",
			"Krantz",
			"linkage density",
			"\"hub\"",
			"Heroes and Cowards",
			"Leptonychotes weddellii",
			"Chionodraco",
			"Chionodraco ",
			"Pygoscelis adeliae",
			"Pygoscelis adeliae,",
			"salpa",
			"WESs",
			"cess",
			"CESs",
			"cess",
			"CESs",
			"pineda",
			"o",
			"commit",
			"remote"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "SLOSS.Rmd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19027,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "ms_SLOSS.Rmd",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34287,
						"regions":
						{
						},
						"selection":
						[
							[
								23902,
								23902
							]
						],
						"settings":
						{
							"spell_check": false,
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4553.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Appendices.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13599,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Pandoc Academic/Syntax/pandoc.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "RunSims.Rmd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43121,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2678,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Pandoc Academic/Syntax/pandoc.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "notes.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20358,
						"regions":
						{
						},
						"selection":
						[
							[
								59,
								59
							]
						],
						"settings":
						{
							"syntax": "Packages/Pandoc Academic/Syntax/pandoc.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "CoverLetter.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2079,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								2079
							]
						],
						"settings":
						{
							"auto_name": "Dear Editor,",
							"syntax": "Packages/Pandoc Academic/Syntax/pandoc.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Users/leonardosaravia/Dropbox/Projects/ChacoSecoFires/FireBibliography.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2984,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "Fletcher, M., Wood, S. W., & Haberle, S. G. (2014)",
							"syntax": "Packages/Pandoc Academic/Syntax/pandoc.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "results.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8810,
						"regions":
						{
						},
						"selection":
						[
							[
								8810,
								8810
							]
						],
						"settings":
						{
							"syntax": "Packages/Pandoc Academic/Syntax/pandoc.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 173.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "multiSLOSS.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ggplot",
				"~/Academicos/GitProjects/LongTermPKP/Data/LongTerm_Meteo.dat"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Dropbox/Projects/AmazonFireTippingPoints/AmazonFireTippingPoints.sublime-project"
			],
			[
				"clase",
				"~/Dropbox/LabBiologia/LOF/clases.sublime-project"
			],
			[
				"ar",
				"~/Academicos/GitProjects/ariadna/ariadna.sublime-project"
			],
			[
				"cv",
				"~/Dropbox/CV/cv.sublime-project"
			],
			[
				"vc",
				"/home/leonardo/Dropbox/CV/cv.sublime-project"
			],
			[
				"cla",
				"/home/leonardo/Dropbox/LabBiologia/LOF/clases.sublime-project"
			],
			[
				"syr",
				"/home/leonardo/Dropbox/Projects/PotterCove/FoodWebStability/FoodWebStability.sublime-project"
			],
			[
				"ung",
				"/home/leonardo/Dropbox/LabBiologia/UNGS2018/ungs2018.sublime-project"
			],
			[
				"nu",
				"/home/leonardo/Dropbox/Projects/IndicSuelo/NullModels/WormsInteractions.sublime-project"
			],
			[
				"cg",
				"/home/leonardo/Dropbox/Projects/CriticalGlobalForest/CriticalGF.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
